
adc_usart1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ec4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08002fd0  08002fd0  00012fd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030a0  080030a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080030a0  080030a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030a0  080030a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030a0  080030a0  000130a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030a4  080030a4  000130a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080030a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  20000070  08003118  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08003118  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007cea  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001878  00000000  00000000  00027d83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007a0  00000000  00000000  00029600  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006c8  00000000  00000000  00029da0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000147cc  00000000  00000000  0002a468  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000706e  00000000  00000000  0003ec34  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006f7e7  00000000  00000000  00045ca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5489  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021d8  00000000  00000000  000b5504  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08002fb8 	.word	0x08002fb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08002fb8 	.word	0x08002fb8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb4c 	bl	80007ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f85a 	bl	800020c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f956 	bl	8000408 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f936 	bl	80003cc <MX_DMA_Init>
  MX_ADC1_Init();
 8000160:	f000 f8ae 	bl	80002c0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000164:	f000 f908 	bl	8000378 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, value, 3);  // start the adc in dma mode
 8000168:	2203      	movs	r2, #3
 800016a:	4921      	ldr	r1, [pc, #132]	; (80001f0 <main+0xa4>)
 800016c:	4821      	ldr	r0, [pc, #132]	; (80001f4 <main+0xa8>)
 800016e:	f000 fc99 	bl	8000aa4 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "%ld ",        value[0]), 500);
 8000172:	4b1f      	ldr	r3, [pc, #124]	; (80001f0 <main+0xa4>)
 8000174:	681b      	ldr	r3, [r3, #0]
 8000176:	461a      	mov	r2, r3
 8000178:	491f      	ldr	r1, [pc, #124]	; (80001f8 <main+0xac>)
 800017a:	4820      	ldr	r0, [pc, #128]	; (80001fc <main+0xb0>)
 800017c:	f002 fb0a 	bl	8002794 <siprintf>
 8000180:	4603      	mov	r3, r0
 8000182:	b29a      	uxth	r2, r3
 8000184:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000188:	491c      	ldr	r1, [pc, #112]	; (80001fc <main+0xb0>)
 800018a:	481d      	ldr	r0, [pc, #116]	; (8000200 <main+0xb4>)
 800018c:	f002 f913 	bl	80023b6 <HAL_UART_Transmit>
	  HAL_Delay (10); // 200ms delay
 8000190:	200a      	movs	r0, #10
 8000192:	f000 fb8d 	bl	80008b0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "%ld ",        value[1]), 500);
 8000196:	4b16      	ldr	r3, [pc, #88]	; (80001f0 <main+0xa4>)
 8000198:	685b      	ldr	r3, [r3, #4]
 800019a:	461a      	mov	r2, r3
 800019c:	4916      	ldr	r1, [pc, #88]	; (80001f8 <main+0xac>)
 800019e:	4817      	ldr	r0, [pc, #92]	; (80001fc <main+0xb0>)
 80001a0:	f002 faf8 	bl	8002794 <siprintf>
 80001a4:	4603      	mov	r3, r0
 80001a6:	b29a      	uxth	r2, r3
 80001a8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001ac:	4913      	ldr	r1, [pc, #76]	; (80001fc <main+0xb0>)
 80001ae:	4814      	ldr	r0, [pc, #80]	; (8000200 <main+0xb4>)
 80001b0:	f002 f901 	bl	80023b6 <HAL_UART_Transmit>
	  HAL_Delay (10); // 200ms delay
 80001b4:	200a      	movs	r0, #10
 80001b6:	f000 fb7b 	bl	80008b0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "%ld \n", value[2]), 500);
 80001ba:	4b0d      	ldr	r3, [pc, #52]	; (80001f0 <main+0xa4>)
 80001bc:	689b      	ldr	r3, [r3, #8]
 80001be:	461a      	mov	r2, r3
 80001c0:	4910      	ldr	r1, [pc, #64]	; (8000204 <main+0xb8>)
 80001c2:	480e      	ldr	r0, [pc, #56]	; (80001fc <main+0xb0>)
 80001c4:	f002 fae6 	bl	8002794 <siprintf>
 80001c8:	4603      	mov	r3, r0
 80001ca:	b29a      	uxth	r2, r3
 80001cc:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80001d0:	490a      	ldr	r1, [pc, #40]	; (80001fc <main+0xb0>)
 80001d2:	480b      	ldr	r0, [pc, #44]	; (8000200 <main+0xb4>)
 80001d4:	f002 f8ef 	bl	80023b6 <HAL_UART_Transmit>
	  HAL_Delay (10); // 200ms delay
 80001d8:	200a      	movs	r0, #10
 80001da:	f000 fb69 	bl	80008b0 <HAL_Delay>
      HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80001de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80001e2:	4809      	ldr	r0, [pc, #36]	; (8000208 <main+0xbc>)
 80001e4:	f001 fbb0 	bl	8001948 <HAL_GPIO_TogglePin>
      HAL_Delay (10); // 200ms delay
 80001e8:	200a      	movs	r0, #10
 80001ea:	f000 fb61 	bl	80008b0 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t*)buffer, sprintf(buffer, "%ld ",        value[0]), 500);
 80001ee:	e7c0      	b.n	8000172 <main+0x26>
 80001f0:	2000015c 	.word	0x2000015c
 80001f4:	20000098 	.word	0x20000098
 80001f8:	08002fd0 	.word	0x08002fd0
 80001fc:	20000108 	.word	0x20000108
 8000200:	200000c8 	.word	0x200000c8
 8000204:	08002fd8 	.word	0x08002fd8
 8000208:	40011000 	.word	0x40011000

0800020c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800020c:	b580      	push	{r7, lr}
 800020e:	b094      	sub	sp, #80	; 0x50
 8000210:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000212:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000216:	2228      	movs	r2, #40	; 0x28
 8000218:	2100      	movs	r1, #0
 800021a:	4618      	mov	r0, r3
 800021c:	f002 fab2 	bl	8002784 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000220:	f107 0314 	add.w	r3, r7, #20
 8000224:	2200      	movs	r2, #0
 8000226:	601a      	str	r2, [r3, #0]
 8000228:	605a      	str	r2, [r3, #4]
 800022a:	609a      	str	r2, [r3, #8]
 800022c:	60da      	str	r2, [r3, #12]
 800022e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000230:	1d3b      	adds	r3, r7, #4
 8000232:	2200      	movs	r2, #0
 8000234:	601a      	str	r2, [r3, #0]
 8000236:	605a      	str	r2, [r3, #4]
 8000238:	609a      	str	r2, [r3, #8]
 800023a:	60da      	str	r2, [r3, #12]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800023c:	2301      	movs	r3, #1
 800023e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000244:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000246:	2300      	movs	r3, #0
 8000248:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800024a:	2301      	movs	r3, #1
 800024c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024e:	2302      	movs	r3, #2
 8000250:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000252:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000256:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000258:	2300      	movs	r3, #0
 800025a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000260:	4618      	mov	r0, r3
 8000262:	f001 fb89 	bl	8001978 <HAL_RCC_OscConfig>
 8000266:	4603      	mov	r3, r0
 8000268:	2b00      	cmp	r3, #0
 800026a:	d001      	beq.n	8000270 <SystemClock_Config+0x64>
  {
    Error_Handler();
 800026c:	f000 f918 	bl	80004a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000270:	230f      	movs	r3, #15
 8000272:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000274:	2302      	movs	r3, #2
 8000276:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000278:	2300      	movs	r3, #0
 800027a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000280:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000282:	2300      	movs	r3, #0
 8000284:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000286:	f107 0314 	add.w	r3, r7, #20
 800028a:	2100      	movs	r1, #0
 800028c:	4618      	mov	r0, r3
 800028e:	f001 fdf3 	bl	8001e78 <HAL_RCC_ClockConfig>
 8000292:	4603      	mov	r3, r0
 8000294:	2b00      	cmp	r3, #0
 8000296:	d001      	beq.n	800029c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000298:	f000 f902 	bl	80004a0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800029c:	2302      	movs	r3, #2
 800029e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80002a0:	2300      	movs	r3, #0
 80002a2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	4618      	mov	r0, r3
 80002a8:	f001 ff82 	bl	80021b0 <HAL_RCCEx_PeriphCLKConfig>
 80002ac:	4603      	mov	r3, r0
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d001      	beq.n	80002b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80002b2:	f000 f8f5 	bl	80004a0 <Error_Handler>
  }
}
 80002b6:	bf00      	nop
 80002b8:	3750      	adds	r7, #80	; 0x50
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bd80      	pop	{r7, pc}
	...

080002c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b084      	sub	sp, #16
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 80002d0:	4b27      	ldr	r3, [pc, #156]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002d2:	4a28      	ldr	r2, [pc, #160]	; (8000374 <MX_ADC1_Init+0xb4>)
 80002d4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80002d6:	4b26      	ldr	r3, [pc, #152]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002dc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80002de:	4b24      	ldr	r3, [pc, #144]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002e0:	2201      	movs	r2, #1
 80002e2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80002e4:	4b22      	ldr	r3, [pc, #136]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80002ea:	4b21      	ldr	r3, [pc, #132]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002ec:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80002f0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f2:	4b1f      	ldr	r3, [pc, #124]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 3;
 80002f8:	4b1d      	ldr	r3, [pc, #116]	; (8000370 <MX_ADC1_Init+0xb0>)
 80002fa:	2203      	movs	r2, #3
 80002fc:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002fe:	481c      	ldr	r0, [pc, #112]	; (8000370 <MX_ADC1_Init+0xb0>)
 8000300:	f000 faf8 	bl	80008f4 <HAL_ADC_Init>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800030a:	f000 f8c9 	bl	80004a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800030e:	2304      	movs	r3, #4
 8000310:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000312:	2301      	movs	r3, #1
 8000314:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000316:	2307      	movs	r3, #7
 8000318:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800031a:	1d3b      	adds	r3, r7, #4
 800031c:	4619      	mov	r1, r3
 800031e:	4814      	ldr	r0, [pc, #80]	; (8000370 <MX_ADC1_Init+0xb0>)
 8000320:	f000 fcba 	bl	8000c98 <HAL_ADC_ConfigChannel>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800032a:	f000 f8b9 	bl	80004a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800032e:	2305      	movs	r3, #5
 8000330:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000332:	2302      	movs	r3, #2
 8000334:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000336:	1d3b      	adds	r3, r7, #4
 8000338:	4619      	mov	r1, r3
 800033a:	480d      	ldr	r0, [pc, #52]	; (8000370 <MX_ADC1_Init+0xb0>)
 800033c:	f000 fcac 	bl	8000c98 <HAL_ADC_ConfigChannel>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000346:	f000 f8ab 	bl	80004a0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800034a:	2306      	movs	r3, #6
 800034c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800034e:	2303      	movs	r3, #3
 8000350:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000352:	1d3b      	adds	r3, r7, #4
 8000354:	4619      	mov	r1, r3
 8000356:	4806      	ldr	r0, [pc, #24]	; (8000370 <MX_ADC1_Init+0xb0>)
 8000358:	f000 fc9e 	bl	8000c98 <HAL_ADC_ConfigChannel>
 800035c:	4603      	mov	r3, r0
 800035e:	2b00      	cmp	r3, #0
 8000360:	d001      	beq.n	8000366 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 8000362:	f000 f89d 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000366:	bf00      	nop
 8000368:	3710      	adds	r7, #16
 800036a:	46bd      	mov	sp, r7
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	20000098 	.word	0x20000098
 8000374:	40012400 	.word	0x40012400

08000378 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800037c:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800037e:	4a12      	ldr	r2, [pc, #72]	; (80003c8 <MX_USART1_UART_Init+0x50>)
 8000380:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000384:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000388:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000392:	2200      	movs	r2, #0
 8000394:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000396:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 8000398:	2200      	movs	r2, #0
 800039a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800039c:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 800039e:	220c      	movs	r2, #12
 80003a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003a2:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003a8:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003ae:	4805      	ldr	r0, [pc, #20]	; (80003c4 <MX_USART1_UART_Init+0x4c>)
 80003b0:	f001 ffb4 	bl	800231c <HAL_UART_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003ba:	f000 f871 	bl	80004a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003be:	bf00      	nop
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	200000c8 	.word	0x200000c8
 80003c8:	40013800 	.word	0x40013800

080003cc <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b082      	sub	sp, #8
 80003d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003d2:	4b0c      	ldr	r3, [pc, #48]	; (8000404 <MX_DMA_Init+0x38>)
 80003d4:	695b      	ldr	r3, [r3, #20]
 80003d6:	4a0b      	ldr	r2, [pc, #44]	; (8000404 <MX_DMA_Init+0x38>)
 80003d8:	f043 0301 	orr.w	r3, r3, #1
 80003dc:	6153      	str	r3, [r2, #20]
 80003de:	4b09      	ldr	r3, [pc, #36]	; (8000404 <MX_DMA_Init+0x38>)
 80003e0:	695b      	ldr	r3, [r3, #20]
 80003e2:	f003 0301 	and.w	r3, r3, #1
 80003e6:	607b      	str	r3, [r7, #4]
 80003e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80003ea:	2200      	movs	r2, #0
 80003ec:	2100      	movs	r1, #0
 80003ee:	200b      	movs	r0, #11
 80003f0:	f000 ff13 	bl	800121a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80003f4:	200b      	movs	r0, #11
 80003f6:	f000 ff2c 	bl	8001252 <HAL_NVIC_EnableIRQ>

}
 80003fa:	bf00      	nop
 80003fc:	3708      	adds	r7, #8
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}
 8000402:	bf00      	nop
 8000404:	40021000 	.word	0x40021000

08000408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b088      	sub	sp, #32
 800040c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040e:	f107 0310 	add.w	r3, r7, #16
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
 8000416:	605a      	str	r2, [r3, #4]
 8000418:	609a      	str	r2, [r3, #8]
 800041a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <MX_GPIO_Init+0x90>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a1d      	ldr	r2, [pc, #116]	; (8000498 <MX_GPIO_Init+0x90>)
 8000422:	f043 0310 	orr.w	r3, r3, #16
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b1b      	ldr	r3, [pc, #108]	; (8000498 <MX_GPIO_Init+0x90>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0310 	and.w	r3, r3, #16
 8000430:	60fb      	str	r3, [r7, #12]
 8000432:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000434:	4b18      	ldr	r3, [pc, #96]	; (8000498 <MX_GPIO_Init+0x90>)
 8000436:	699b      	ldr	r3, [r3, #24]
 8000438:	4a17      	ldr	r2, [pc, #92]	; (8000498 <MX_GPIO_Init+0x90>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6193      	str	r3, [r2, #24]
 8000440:	4b15      	ldr	r3, [pc, #84]	; (8000498 <MX_GPIO_Init+0x90>)
 8000442:	699b      	ldr	r3, [r3, #24]
 8000444:	f003 0320 	and.w	r3, r3, #32
 8000448:	60bb      	str	r3, [r7, #8]
 800044a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800044c:	4b12      	ldr	r3, [pc, #72]	; (8000498 <MX_GPIO_Init+0x90>)
 800044e:	699b      	ldr	r3, [r3, #24]
 8000450:	4a11      	ldr	r2, [pc, #68]	; (8000498 <MX_GPIO_Init+0x90>)
 8000452:	f043 0304 	orr.w	r3, r3, #4
 8000456:	6193      	str	r3, [r2, #24]
 8000458:	4b0f      	ldr	r3, [pc, #60]	; (8000498 <MX_GPIO_Init+0x90>)
 800045a:	699b      	ldr	r3, [r3, #24]
 800045c:	f003 0304 	and.w	r3, r3, #4
 8000460:	607b      	str	r3, [r7, #4]
 8000462:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000464:	2200      	movs	r2, #0
 8000466:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046a:	480c      	ldr	r0, [pc, #48]	; (800049c <MX_GPIO_Init+0x94>)
 800046c:	f001 fa54 	bl	8001918 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000476:	2301      	movs	r3, #1
 8000478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047a:	2300      	movs	r3, #0
 800047c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800047e:	2302      	movs	r3, #2
 8000480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000482:	f107 0310 	add.w	r3, r7, #16
 8000486:	4619      	mov	r1, r3
 8000488:	4804      	ldr	r0, [pc, #16]	; (800049c <MX_GPIO_Init+0x94>)
 800048a:	f001 f8eb 	bl	8001664 <HAL_GPIO_Init>

}
 800048e:	bf00      	nop
 8000490:	3720      	adds	r7, #32
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40011000 	.word	0x40011000

080004a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a0:	b480      	push	{r7}
 80004a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80004a4:	bf00      	nop
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80004b2:	4b15      	ldr	r3, [pc, #84]	; (8000508 <HAL_MspInit+0x5c>)
 80004b4:	699b      	ldr	r3, [r3, #24]
 80004b6:	4a14      	ldr	r2, [pc, #80]	; (8000508 <HAL_MspInit+0x5c>)
 80004b8:	f043 0301 	orr.w	r3, r3, #1
 80004bc:	6193      	str	r3, [r2, #24]
 80004be:	4b12      	ldr	r3, [pc, #72]	; (8000508 <HAL_MspInit+0x5c>)
 80004c0:	699b      	ldr	r3, [r3, #24]
 80004c2:	f003 0301 	and.w	r3, r3, #1
 80004c6:	60bb      	str	r3, [r7, #8]
 80004c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ca:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <HAL_MspInit+0x5c>)
 80004cc:	69db      	ldr	r3, [r3, #28]
 80004ce:	4a0e      	ldr	r2, [pc, #56]	; (8000508 <HAL_MspInit+0x5c>)
 80004d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d4:	61d3      	str	r3, [r2, #28]
 80004d6:	4b0c      	ldr	r3, [pc, #48]	; (8000508 <HAL_MspInit+0x5c>)
 80004d8:	69db      	ldr	r3, [r3, #28]
 80004da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004de:	607b      	str	r3, [r7, #4]
 80004e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004e2:	4b0a      	ldr	r3, [pc, #40]	; (800050c <HAL_MspInit+0x60>)
 80004e4:	685b      	ldr	r3, [r3, #4]
 80004e6:	60fb      	str	r3, [r7, #12]
 80004e8:	68fb      	ldr	r3, [r7, #12]
 80004ea:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80004ee:	60fb      	str	r3, [r7, #12]
 80004f0:	68fb      	ldr	r3, [r7, #12]
 80004f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80004f6:	60fb      	str	r3, [r7, #12]
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <HAL_MspInit+0x60>)
 80004fa:	68fb      	ldr	r3, [r7, #12]
 80004fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004fe:	bf00      	nop
 8000500:	3714      	adds	r7, #20
 8000502:	46bd      	mov	sp, r7
 8000504:	bc80      	pop	{r7}
 8000506:	4770      	bx	lr
 8000508:	40021000 	.word	0x40021000
 800050c:	40010000 	.word	0x40010000

08000510 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b088      	sub	sp, #32
 8000514:	af00      	add	r7, sp, #0
 8000516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000518:	f107 0310 	add.w	r3, r7, #16
 800051c:	2200      	movs	r2, #0
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	605a      	str	r2, [r3, #4]
 8000522:	609a      	str	r2, [r3, #8]
 8000524:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4a28      	ldr	r2, [pc, #160]	; (80005cc <HAL_ADC_MspInit+0xbc>)
 800052c:	4293      	cmp	r3, r2
 800052e:	d149      	bne.n	80005c4 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000530:	4b27      	ldr	r3, [pc, #156]	; (80005d0 <HAL_ADC_MspInit+0xc0>)
 8000532:	699b      	ldr	r3, [r3, #24]
 8000534:	4a26      	ldr	r2, [pc, #152]	; (80005d0 <HAL_ADC_MspInit+0xc0>)
 8000536:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800053a:	6193      	str	r3, [r2, #24]
 800053c:	4b24      	ldr	r3, [pc, #144]	; (80005d0 <HAL_ADC_MspInit+0xc0>)
 800053e:	699b      	ldr	r3, [r3, #24]
 8000540:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <HAL_ADC_MspInit+0xc0>)
 800054a:	699b      	ldr	r3, [r3, #24]
 800054c:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <HAL_ADC_MspInit+0xc0>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6193      	str	r3, [r2, #24]
 8000554:	4b1e      	ldr	r3, [pc, #120]	; (80005d0 <HAL_ADC_MspInit+0xc0>)
 8000556:	699b      	ldr	r3, [r3, #24]
 8000558:	f003 0304 	and.w	r3, r3, #4
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000560:	2370      	movs	r3, #112	; 0x70
 8000562:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000564:	2303      	movs	r3, #3
 8000566:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	4819      	ldr	r0, [pc, #100]	; (80005d4 <HAL_ADC_MspInit+0xc4>)
 8000570:	f001 f878 	bl	8001664 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000574:	4b18      	ldr	r3, [pc, #96]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 8000576:	4a19      	ldr	r2, [pc, #100]	; (80005dc <HAL_ADC_MspInit+0xcc>)
 8000578:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800057a:	4b17      	ldr	r3, [pc, #92]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 800057c:	2200      	movs	r2, #0
 800057e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000580:	4b15      	ldr	r3, [pc, #84]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 8000582:	2200      	movs	r2, #0
 8000584:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000586:	4b14      	ldr	r3, [pc, #80]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 8000588:	2280      	movs	r2, #128	; 0x80
 800058a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 800058e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000592:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000594:	4b10      	ldr	r3, [pc, #64]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 8000596:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800059a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800059c:	4b0e      	ldr	r3, [pc, #56]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 800059e:	2220      	movs	r2, #32
 80005a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80005a2:	4b0d      	ldr	r3, [pc, #52]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80005a8:	480b      	ldr	r0, [pc, #44]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 80005aa:	f000 fe6d 	bl	8001288 <HAL_DMA_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80005b4:	f7ff ff74 	bl	80004a0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	4a07      	ldr	r2, [pc, #28]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 80005bc:	621a      	str	r2, [r3, #32]
 80005be:	4a06      	ldr	r2, [pc, #24]	; (80005d8 <HAL_ADC_MspInit+0xc8>)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80005c4:	bf00      	nop
 80005c6:	3720      	adds	r7, #32
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	40012400 	.word	0x40012400
 80005d0:	40021000 	.word	0x40021000
 80005d4:	40010800 	.word	0x40010800
 80005d8:	20000118 	.word	0x20000118
 80005dc:	40020008 	.word	0x40020008

080005e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a1c      	ldr	r2, [pc, #112]	; (800066c <HAL_UART_MspInit+0x8c>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d131      	bne.n	8000664 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <HAL_UART_MspInit+0x90>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a1a      	ldr	r2, [pc, #104]	; (8000670 <HAL_UART_MspInit+0x90>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <HAL_UART_MspInit+0x90>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <HAL_UART_MspInit+0x90>)
 800061a:	699b      	ldr	r3, [r3, #24]
 800061c:	4a14      	ldr	r2, [pc, #80]	; (8000670 <HAL_UART_MspInit+0x90>)
 800061e:	f043 0304 	orr.w	r3, r3, #4
 8000622:	6193      	str	r3, [r2, #24]
 8000624:	4b12      	ldr	r3, [pc, #72]	; (8000670 <HAL_UART_MspInit+0x90>)
 8000626:	699b      	ldr	r3, [r3, #24]
 8000628:	f003 0304 	and.w	r3, r3, #4
 800062c:	60bb      	str	r3, [r7, #8]
 800062e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000630:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000636:	2302      	movs	r3, #2
 8000638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063a:	2303      	movs	r3, #3
 800063c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0310 	add.w	r3, r7, #16
 8000642:	4619      	mov	r1, r3
 8000644:	480b      	ldr	r0, [pc, #44]	; (8000674 <HAL_UART_MspInit+0x94>)
 8000646:	f001 f80d 	bl	8001664 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800064a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800064e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000658:	f107 0310 	add.w	r3, r7, #16
 800065c:	4619      	mov	r1, r3
 800065e:	4805      	ldr	r0, [pc, #20]	; (8000674 <HAL_UART_MspInit+0x94>)
 8000660:	f001 f800 	bl	8001664 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000664:	bf00      	nop
 8000666:	3720      	adds	r7, #32
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}
 800066c:	40013800 	.word	0x40013800
 8000670:	40021000 	.word	0x40021000
 8000674:	40010800 	.word	0x40010800

08000678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800067c:	bf00      	nop
 800067e:	46bd      	mov	sp, r7
 8000680:	bc80      	pop	{r7}
 8000682:	4770      	bx	lr

08000684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000688:	e7fe      	b.n	8000688 <HardFault_Handler+0x4>

0800068a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800068a:	b480      	push	{r7}
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800068e:	e7fe      	b.n	800068e <MemManage_Handler+0x4>

08000690 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000694:	e7fe      	b.n	8000694 <BusFault_Handler+0x4>

08000696 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000696:	b480      	push	{r7}
 8000698:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800069a:	e7fe      	b.n	800069a <UsageFault_Handler+0x4>

0800069c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800069c:	b480      	push	{r7}
 800069e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006a0:	bf00      	nop
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bc80      	pop	{r7}
 80006a6:	4770      	bx	lr

080006a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ac:	bf00      	nop
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bc80      	pop	{r7}
 80006b2:	4770      	bx	lr

080006b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006b4:	b480      	push	{r7}
 80006b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006b8:	bf00      	nop
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bc80      	pop	{r7}
 80006be:	4770      	bx	lr

080006c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006c4:	f000 f8d8 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006c8:	bf00      	nop
 80006ca:	bd80      	pop	{r7, pc}

080006cc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80006d0:	4802      	ldr	r0, [pc, #8]	; (80006dc <DMA1_Channel1_IRQHandler+0x10>)
 80006d2:	f000 fe93 	bl	80013fc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000118 	.word	0x20000118

080006e0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b084      	sub	sp, #16
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <_sbrk+0x50>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <_sbrk+0x16>
		heap_end = &end;
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <_sbrk+0x50>)
 80006f2:	4a10      	ldr	r2, [pc, #64]	; (8000734 <_sbrk+0x54>)
 80006f4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <_sbrk+0x50>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <_sbrk+0x50>)
 80006fe:	681a      	ldr	r2, [r3, #0]
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	4413      	add	r3, r2
 8000704:	466a      	mov	r2, sp
 8000706:	4293      	cmp	r3, r2
 8000708:	d907      	bls.n	800071a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800070a:	f002 f811 	bl	8002730 <__errno>
 800070e:	4602      	mov	r2, r0
 8000710:	230c      	movs	r3, #12
 8000712:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000714:	f04f 33ff 	mov.w	r3, #4294967295
 8000718:	e006      	b.n	8000728 <_sbrk+0x48>
	}

	heap_end += incr;
 800071a:	4b05      	ldr	r3, [pc, #20]	; (8000730 <_sbrk+0x50>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	4413      	add	r3, r2
 8000722:	4a03      	ldr	r2, [pc, #12]	; (8000730 <_sbrk+0x50>)
 8000724:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000726:	68fb      	ldr	r3, [r7, #12]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	2000008c 	.word	0x2000008c
 8000734:	20000170 	.word	0x20000170

08000738 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800073c:	4b15      	ldr	r3, [pc, #84]	; (8000794 <SystemInit+0x5c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a14      	ldr	r2, [pc, #80]	; (8000794 <SystemInit+0x5c>)
 8000742:	f043 0301 	orr.w	r3, r3, #1
 8000746:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <SystemInit+0x5c>)
 800074a:	685a      	ldr	r2, [r3, #4]
 800074c:	4911      	ldr	r1, [pc, #68]	; (8000794 <SystemInit+0x5c>)
 800074e:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x60>)
 8000750:	4013      	ands	r3, r2
 8000752:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8000754:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <SystemInit+0x5c>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0e      	ldr	r2, [pc, #56]	; (8000794 <SystemInit+0x5c>)
 800075a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800075e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000762:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b0b      	ldr	r3, [pc, #44]	; (8000794 <SystemInit+0x5c>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a0a      	ldr	r2, [pc, #40]	; (8000794 <SystemInit+0x5c>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000770:	4b08      	ldr	r3, [pc, #32]	; (8000794 <SystemInit+0x5c>)
 8000772:	685b      	ldr	r3, [r3, #4]
 8000774:	4a07      	ldr	r2, [pc, #28]	; (8000794 <SystemInit+0x5c>)
 8000776:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800077a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <SystemInit+0x5c>)
 800077e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000782:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <SystemInit+0x64>)
 8000786:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800078a:	609a      	str	r2, [r3, #8]
#endif 
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr
 8000794:	40021000 	.word	0x40021000
 8000798:	f8ff0000 	.word	0xf8ff0000
 800079c:	e000ed00 	.word	0xe000ed00

080007a0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80007a0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80007a2:	e003      	b.n	80007ac <LoopCopyDataInit>

080007a4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80007a4:	4b0b      	ldr	r3, [pc, #44]	; (80007d4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80007a6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80007a8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80007aa:	3104      	adds	r1, #4

080007ac <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80007ac:	480a      	ldr	r0, [pc, #40]	; (80007d8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80007ae:	4b0b      	ldr	r3, [pc, #44]	; (80007dc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80007b0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80007b2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80007b4:	d3f6      	bcc.n	80007a4 <CopyDataInit>
  ldr r2, =_sbss
 80007b6:	4a0a      	ldr	r2, [pc, #40]	; (80007e0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80007b8:	e002      	b.n	80007c0 <LoopFillZerobss>

080007ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80007ba:	2300      	movs	r3, #0
  str r3, [r2], #4
 80007bc:	f842 3b04 	str.w	r3, [r2], #4

080007c0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80007c0:	4b08      	ldr	r3, [pc, #32]	; (80007e4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80007c2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80007c4:	d3f9      	bcc.n	80007ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80007c6:	f7ff ffb7 	bl	8000738 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80007ca:	f001 ffb7 	bl	800273c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80007ce:	f7ff fcbd 	bl	800014c <main>
  bx lr
 80007d2:	4770      	bx	lr
  ldr r3, =_sidata
 80007d4:	080030a8 	.word	0x080030a8
  ldr r0, =_sdata
 80007d8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80007dc:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 80007e0:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 80007e4:	20000170 	.word	0x20000170

080007e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007e8:	e7fe      	b.n	80007e8 <ADC1_2_IRQHandler>
	...

080007ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007f0:	4b08      	ldr	r3, [pc, #32]	; (8000814 <HAL_Init+0x28>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	4a07      	ldr	r2, [pc, #28]	; (8000814 <HAL_Init+0x28>)
 80007f6:	f043 0310 	orr.w	r3, r3, #16
 80007fa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007fc:	2003      	movs	r0, #3
 80007fe:	f000 fd01 	bl	8001204 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000802:	2000      	movs	r0, #0
 8000804:	f000 f808 	bl	8000818 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000808:	f7ff fe50 	bl	80004ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800080c:	2300      	movs	r3, #0
}
 800080e:	4618      	mov	r0, r3
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40022000 	.word	0x40022000

08000818 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
 800081e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <HAL_InitTick+0x54>)
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <HAL_InitTick+0x58>)
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	4619      	mov	r1, r3
 800082a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800082e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000832:	fbb2 f3f3 	udiv	r3, r2, r3
 8000836:	4618      	mov	r0, r3
 8000838:	f000 fd19 	bl	800126e <HAL_SYSTICK_Config>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000842:	2301      	movs	r3, #1
 8000844:	e00e      	b.n	8000864 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b0f      	cmp	r3, #15
 800084a:	d80a      	bhi.n	8000862 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	f04f 30ff 	mov.w	r0, #4294967295
 8000854:	f000 fce1 	bl	800121a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000858:	4a06      	ldr	r2, [pc, #24]	; (8000874 <HAL_InitTick+0x5c>)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800085e:	2300      	movs	r3, #0
 8000860:	e000      	b.n	8000864 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000862:	2301      	movs	r3, #1
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000000 	.word	0x20000000
 8000870:	20000008 	.word	0x20000008
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800087c:	4b05      	ldr	r3, [pc, #20]	; (8000894 <HAL_IncTick+0x1c>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b05      	ldr	r3, [pc, #20]	; (8000898 <HAL_IncTick+0x20>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a03      	ldr	r2, [pc, #12]	; (8000898 <HAL_IncTick+0x20>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	20000008 	.word	0x20000008
 8000898:	20000168 	.word	0x20000168

0800089c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0
  return uwTick;
 80008a0:	4b02      	ldr	r3, [pc, #8]	; (80008ac <HAL_GetTick+0x10>)
 80008a2:	681b      	ldr	r3, [r3, #0]
}
 80008a4:	4618      	mov	r0, r3
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bc80      	pop	{r7}
 80008aa:	4770      	bx	lr
 80008ac:	20000168 	.word	0x20000168

080008b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b084      	sub	sp, #16
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008b8:	f7ff fff0 	bl	800089c <HAL_GetTick>
 80008bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008c8:	d005      	beq.n	80008d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <HAL_Delay+0x40>)
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	461a      	mov	r2, r3
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	4413      	add	r3, r2
 80008d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008d6:	bf00      	nop
 80008d8:	f7ff ffe0 	bl	800089c <HAL_GetTick>
 80008dc:	4602      	mov	r2, r0
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	1ad3      	subs	r3, r2, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d8f7      	bhi.n	80008d8 <HAL_Delay+0x28>
  {
  }
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000008 	.word	0x20000008

080008f4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b086      	sub	sp, #24
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80008fc:	2300      	movs	r3, #0
 80008fe:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d101      	bne.n	8000916 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000912:	2301      	movs	r3, #1
 8000914:	e0be      	b.n	8000a94 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	689b      	ldr	r3, [r3, #8]
 800091a:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000920:	2b00      	cmp	r3, #0
 8000922:	d109      	bne.n	8000938 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	2200      	movs	r2, #0
 8000928:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	2200      	movs	r2, #0
 800092e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000932:	6878      	ldr	r0, [r7, #4]
 8000934:	f7ff fdec 	bl	8000510 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f000 faf7 	bl	8000f2c <ADC_ConversionStop_Disable>
 800093e:	4603      	mov	r3, r0
 8000940:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000946:	f003 0310 	and.w	r3, r3, #16
 800094a:	2b00      	cmp	r3, #0
 800094c:	f040 8099 	bne.w	8000a82 <HAL_ADC_Init+0x18e>
 8000950:	7dfb      	ldrb	r3, [r7, #23]
 8000952:	2b00      	cmp	r3, #0
 8000954:	f040 8095 	bne.w	8000a82 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000960:	f023 0302 	bic.w	r3, r3, #2
 8000964:	f043 0202 	orr.w	r2, r3, #2
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000974:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7b1b      	ldrb	r3, [r3, #12]
 800097a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800097c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	4313      	orrs	r3, r2
 8000982:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800098c:	d003      	beq.n	8000996 <HAL_ADC_Init+0xa2>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	689b      	ldr	r3, [r3, #8]
 8000992:	2b01      	cmp	r3, #1
 8000994:	d102      	bne.n	800099c <HAL_ADC_Init+0xa8>
 8000996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800099a:	e000      	b.n	800099e <HAL_ADC_Init+0xaa>
 800099c:	2300      	movs	r3, #0
 800099e:	693a      	ldr	r2, [r7, #16]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	7d1b      	ldrb	r3, [r3, #20]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d119      	bne.n	80009e0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	7b1b      	ldrb	r3, [r3, #12]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d109      	bne.n	80009c8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	699b      	ldr	r3, [r3, #24]
 80009b8:	3b01      	subs	r3, #1
 80009ba:	035a      	lsls	r2, r3, #13
 80009bc:	693b      	ldr	r3, [r7, #16]
 80009be:	4313      	orrs	r3, r2
 80009c0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80009c4:	613b      	str	r3, [r7, #16]
 80009c6:	e00b      	b.n	80009e0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009cc:	f043 0220 	orr.w	r2, r3, #32
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009d8:	f043 0201 	orr.w	r2, r3, #1
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	693a      	ldr	r2, [r7, #16]
 80009f0:	430a      	orrs	r2, r1
 80009f2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	689a      	ldr	r2, [r3, #8]
 80009fa:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <HAL_ADC_Init+0x1a8>)
 80009fc:	4013      	ands	r3, r2
 80009fe:	687a      	ldr	r2, [r7, #4]
 8000a00:	6812      	ldr	r2, [r2, #0]
 8000a02:	68b9      	ldr	r1, [r7, #8]
 8000a04:	430b      	orrs	r3, r1
 8000a06:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000a10:	d003      	beq.n	8000a1a <HAL_ADC_Init+0x126>
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	689b      	ldr	r3, [r3, #8]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d104      	bne.n	8000a24 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	691b      	ldr	r3, [r3, #16]
 8000a1e:	3b01      	subs	r3, #1
 8000a20:	051b      	lsls	r3, r3, #20
 8000a22:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a2a:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	68fa      	ldr	r2, [r7, #12]
 8000a34:	430a      	orrs	r2, r1
 8000a36:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	689a      	ldr	r2, [r3, #8]
 8000a3e:	4b18      	ldr	r3, [pc, #96]	; (8000aa0 <HAL_ADC_Init+0x1ac>)
 8000a40:	4013      	ands	r3, r2
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	429a      	cmp	r2, r3
 8000a46:	d10b      	bne.n	8000a60 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a52:	f023 0303 	bic.w	r3, r3, #3
 8000a56:	f043 0201 	orr.w	r2, r3, #1
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a5e:	e018      	b.n	8000a92 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a64:	f023 0312 	bic.w	r3, r3, #18
 8000a68:	f043 0210 	orr.w	r2, r3, #16
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a74:	f043 0201 	orr.w	r2, r3, #1
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000a80:	e007      	b.n	8000a92 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a86:	f043 0210 	orr.w	r2, r3, #16
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000a92:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a94:	4618      	mov	r0, r3
 8000a96:	3718      	adds	r7, #24
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	ffe1f7fd 	.word	0xffe1f7fd
 8000aa0:	ff1f0efe 	.word	0xff1f0efe

08000aa4 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a64      	ldr	r2, [pc, #400]	; (8000c4c <HAL_ADC_Start_DMA+0x1a8>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d004      	beq.n	8000ac8 <HAL_ADC_Start_DMA+0x24>
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a63      	ldr	r2, [pc, #396]	; (8000c50 <HAL_ADC_Start_DMA+0x1ac>)
 8000ac4:	4293      	cmp	r3, r2
 8000ac6:	d106      	bne.n	8000ad6 <HAL_ADC_Start_DMA+0x32>
 8000ac8:	4b60      	ldr	r3, [pc, #384]	; (8000c4c <HAL_ADC_Start_DMA+0x1a8>)
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	f040 80b3 	bne.w	8000c3c <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d101      	bne.n	8000ae4 <HAL_ADC_Start_DMA+0x40>
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e0ae      	b.n	8000c42 <HAL_ADC_Start_DMA+0x19e>
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000aec:	68f8      	ldr	r0, [r7, #12]
 8000aee:	f000 f9cb 	bl	8000e88 <ADC_Enable>
 8000af2:	4603      	mov	r3, r0
 8000af4:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000af6:	7dfb      	ldrb	r3, [r7, #23]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	f040 809a 	bne.w	8000c32 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000afe:	68fb      	ldr	r3, [r7, #12]
 8000b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b02:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000b06:	f023 0301 	bic.w	r3, r3, #1
 8000b0a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a4e      	ldr	r2, [pc, #312]	; (8000c50 <HAL_ADC_Start_DMA+0x1ac>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d105      	bne.n	8000b28 <HAL_ADC_Start_DMA+0x84>
 8000b1c:	4b4b      	ldr	r3, [pc, #300]	; (8000c4c <HAL_ADC_Start_DMA+0x1a8>)
 8000b1e:	685b      	ldr	r3, [r3, #4]
 8000b20:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d115      	bne.n	8000b54 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b2c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	685b      	ldr	r3, [r3, #4]
 8000b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d026      	beq.n	8000b90 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b46:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b4a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000b52:	e01d      	b.n	8000b90 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a39      	ldr	r2, [pc, #228]	; (8000c4c <HAL_ADC_Start_DMA+0x1a8>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	d004      	beq.n	8000b74 <HAL_ADC_Start_DMA+0xd0>
 8000b6a:	68fb      	ldr	r3, [r7, #12]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	4a38      	ldr	r2, [pc, #224]	; (8000c50 <HAL_ADC_Start_DMA+0x1ac>)
 8000b70:	4293      	cmp	r3, r2
 8000b72:	d10d      	bne.n	8000b90 <HAL_ADC_Start_DMA+0xec>
 8000b74:	4b35      	ldr	r3, [pc, #212]	; (8000c4c <HAL_ADC_Start_DMA+0x1a8>)
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d007      	beq.n	8000b90 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b84:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b88:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000b94:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d006      	beq.n	8000baa <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba0:	f023 0206 	bic.w	r2, r3, #6
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ba8:	e002      	b.n	8000bb0 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	2200      	movs	r2, #0
 8000bae:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	6a1b      	ldr	r3, [r3, #32]
 8000bbc:	4a25      	ldr	r2, [pc, #148]	; (8000c54 <HAL_ADC_Start_DMA+0x1b0>)
 8000bbe:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	6a1b      	ldr	r3, [r3, #32]
 8000bc4:	4a24      	ldr	r2, [pc, #144]	; (8000c58 <HAL_ADC_Start_DMA+0x1b4>)
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	6a1b      	ldr	r3, [r3, #32]
 8000bcc:	4a23      	ldr	r2, [pc, #140]	; (8000c5c <HAL_ADC_Start_DMA+0x1b8>)
 8000bce:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	f06f 0202 	mvn.w	r2, #2
 8000bd8:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	689a      	ldr	r2, [r3, #8]
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000be8:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	6a18      	ldr	r0, [r3, #32]
 8000bee:	68fb      	ldr	r3, [r7, #12]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	334c      	adds	r3, #76	; 0x4c
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	68ba      	ldr	r2, [r7, #8]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f000 fb9f 	bl	800133c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	689b      	ldr	r3, [r3, #8]
 8000c04:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000c08:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000c0c:	d108      	bne.n	8000c20 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	689a      	ldr	r2, [r3, #8]
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8000c1c:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c1e:	e00f      	b.n	8000c40 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	689a      	ldr	r2, [r3, #8]
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000c2e:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000c30:	e006      	b.n	8000c40 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	2200      	movs	r2, #0
 8000c36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 8000c3a:	e001      	b.n	8000c40 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000c40:	7dfb      	ldrb	r3, [r7, #23]
}
 8000c42:	4618      	mov	r0, r3
 8000c44:	3718      	adds	r7, #24
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40012400 	.word	0x40012400
 8000c50:	40012800 	.word	0x40012800
 8000c54:	08000fa1 	.word	0x08000fa1
 8000c58:	0800101d 	.word	0x0800101d
 8000c5c:	08001039 	.word	0x08001039

08000c60 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b083      	sub	sp, #12
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bc80      	pop	{r7}
 8000c70:	4770      	bx	lr

08000c72 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b083      	sub	sp, #12
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr

08000c84 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b083      	sub	sp, #12
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000c8c:	bf00      	nop
 8000c8e:	370c      	adds	r7, #12
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bc80      	pop	{r7}
 8000c94:	4770      	bx	lr
	...

08000c98 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d101      	bne.n	8000cb8 <HAL_ADC_ConfigChannel+0x20>
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	e0dc      	b.n	8000e72 <HAL_ADC_ConfigChannel+0x1da>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	2b06      	cmp	r3, #6
 8000cc6:	d81c      	bhi.n	8000d02 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685a      	ldr	r2, [r3, #4]
 8000cd2:	4613      	mov	r3, r2
 8000cd4:	009b      	lsls	r3, r3, #2
 8000cd6:	4413      	add	r3, r2
 8000cd8:	3b05      	subs	r3, #5
 8000cda:	221f      	movs	r2, #31
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	43db      	mvns	r3, r3
 8000ce2:	4019      	ands	r1, r3
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	6818      	ldr	r0, [r3, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	685a      	ldr	r2, [r3, #4]
 8000cec:	4613      	mov	r3, r2
 8000cee:	009b      	lsls	r3, r3, #2
 8000cf0:	4413      	add	r3, r2
 8000cf2:	3b05      	subs	r3, #5
 8000cf4:	fa00 f203 	lsl.w	r2, r0, r3
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	430a      	orrs	r2, r1
 8000cfe:	635a      	str	r2, [r3, #52]	; 0x34
 8000d00:	e03c      	b.n	8000d7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	2b0c      	cmp	r3, #12
 8000d08:	d81c      	bhi.n	8000d44 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	681b      	ldr	r3, [r3, #0]
 8000d0e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685a      	ldr	r2, [r3, #4]
 8000d14:	4613      	mov	r3, r2
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	4413      	add	r3, r2
 8000d1a:	3b23      	subs	r3, #35	; 0x23
 8000d1c:	221f      	movs	r2, #31
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43db      	mvns	r3, r3
 8000d24:	4019      	ands	r1, r3
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	6818      	ldr	r0, [r3, #0]
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685a      	ldr	r2, [r3, #4]
 8000d2e:	4613      	mov	r3, r2
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	4413      	add	r3, r2
 8000d34:	3b23      	subs	r3, #35	; 0x23
 8000d36:	fa00 f203 	lsl.w	r2, r0, r3
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	430a      	orrs	r2, r1
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
 8000d42:	e01b      	b.n	8000d7c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	4613      	mov	r3, r2
 8000d50:	009b      	lsls	r3, r3, #2
 8000d52:	4413      	add	r3, r2
 8000d54:	3b41      	subs	r3, #65	; 0x41
 8000d56:	221f      	movs	r2, #31
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	4019      	ands	r1, r3
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	6818      	ldr	r0, [r3, #0]
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	4613      	mov	r3, r2
 8000d6a:	009b      	lsls	r3, r3, #2
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3b41      	subs	r3, #65	; 0x41
 8000d70:	fa00 f203 	lsl.w	r2, r0, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b09      	cmp	r3, #9
 8000d82:	d91c      	bls.n	8000dbe <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	68d9      	ldr	r1, [r3, #12]
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	4613      	mov	r3, r2
 8000d90:	005b      	lsls	r3, r3, #1
 8000d92:	4413      	add	r3, r2
 8000d94:	3b1e      	subs	r3, #30
 8000d96:	2207      	movs	r2, #7
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	43db      	mvns	r3, r3
 8000d9e:	4019      	ands	r1, r3
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	6898      	ldr	r0, [r3, #8]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	681a      	ldr	r2, [r3, #0]
 8000da8:	4613      	mov	r3, r2
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	4413      	add	r3, r2
 8000dae:	3b1e      	subs	r3, #30
 8000db0:	fa00 f203 	lsl.w	r2, r0, r3
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	430a      	orrs	r2, r1
 8000dba:	60da      	str	r2, [r3, #12]
 8000dbc:	e019      	b.n	8000df2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	6919      	ldr	r1, [r3, #16]
 8000dc4:	683b      	ldr	r3, [r7, #0]
 8000dc6:	681a      	ldr	r2, [r3, #0]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	4413      	add	r3, r2
 8000dce:	2207      	movs	r2, #7
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	4019      	ands	r1, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	6898      	ldr	r0, [r3, #8]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	4613      	mov	r3, r2
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	4413      	add	r3, r2
 8000de6:	fa00 f203 	lsl.w	r2, r0, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	430a      	orrs	r2, r1
 8000df0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000df2:	683b      	ldr	r3, [r7, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	2b10      	cmp	r3, #16
 8000df8:	d003      	beq.n	8000e02 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000dfe:	2b11      	cmp	r3, #17
 8000e00:	d132      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <HAL_ADC_ConfigChannel+0x1e4>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d125      	bne.n	8000e58 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	689b      	ldr	r3, [r3, #8]
 8000e12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d126      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	689a      	ldr	r2, [r3, #8]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8000e28:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2b10      	cmp	r3, #16
 8000e30:	d11a      	bne.n	8000e68 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000e32:	4b13      	ldr	r3, [pc, #76]	; (8000e80 <HAL_ADC_ConfigChannel+0x1e8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4a13      	ldr	r2, [pc, #76]	; (8000e84 <HAL_ADC_ConfigChannel+0x1ec>)
 8000e38:	fba2 2303 	umull	r2, r3, r2, r3
 8000e3c:	0c9a      	lsrs	r2, r3, #18
 8000e3e:	4613      	mov	r3, r2
 8000e40:	009b      	lsls	r3, r3, #2
 8000e42:	4413      	add	r3, r2
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e48:	e002      	b.n	8000e50 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8000e4a:	68bb      	ldr	r3, [r7, #8]
 8000e4c:	3b01      	subs	r3, #1
 8000e4e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d1f9      	bne.n	8000e4a <HAL_ADC_ConfigChannel+0x1b2>
 8000e56:	e007      	b.n	8000e68 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	f043 0220 	orr.w	r2, r3, #32
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8000e64:	2301      	movs	r3, #1
 8000e66:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8000e70:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3714      	adds	r7, #20
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bc80      	pop	{r7}
 8000e7a:	4770      	bx	lr
 8000e7c:	40012400 	.word	0x40012400
 8000e80:	20000000 	.word	0x20000000
 8000e84:	431bde83 	.word	0x431bde83

08000e88 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b084      	sub	sp, #16
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8000e94:	2300      	movs	r3, #0
 8000e96:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689b      	ldr	r3, [r3, #8]
 8000e9e:	f003 0301 	and.w	r3, r3, #1
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d039      	beq.n	8000f1a <ADC_Enable+0x92>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	689a      	ldr	r2, [r3, #8]
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f042 0201 	orr.w	r2, r2, #1
 8000eb4:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000eb6:	4b1b      	ldr	r3, [pc, #108]	; (8000f24 <ADC_Enable+0x9c>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a1b      	ldr	r2, [pc, #108]	; (8000f28 <ADC_Enable+0xa0>)
 8000ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8000ec0:	0c9b      	lsrs	r3, r3, #18
 8000ec2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ec4:	e002      	b.n	8000ecc <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8000ec6:	68bb      	ldr	r3, [r7, #8]
 8000ec8:	3b01      	subs	r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d1f9      	bne.n	8000ec6 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000ed2:	f7ff fce3 	bl	800089c <HAL_GetTick>
 8000ed6:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000ed8:	e018      	b.n	8000f0c <ADC_Enable+0x84>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000eda:	f7ff fcdf 	bl	800089c <HAL_GetTick>
 8000ede:	4602      	mov	r2, r0
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	1ad3      	subs	r3, r2, r3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d911      	bls.n	8000f0c <ADC_Enable+0x84>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	f043 0210 	orr.w	r2, r3, #16
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	629a      	str	r2, [r3, #40]	; 0x28
      
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ef8:	f043 0201 	orr.w	r2, r3, #1
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
        return HAL_ERROR;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	e007      	b.n	8000f1c <ADC_Enable+0x94>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d1df      	bne.n	8000eda <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000f1a:	2300      	movs	r3, #0
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3710      	adds	r7, #16
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	20000000 	.word	0x20000000
 8000f28:	431bde83 	.word	0x431bde83

08000f2c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8000f34:	2300      	movs	r3, #0
 8000f36:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 0301 	and.w	r3, r3, #1
 8000f42:	2b01      	cmp	r3, #1
 8000f44:	d127      	bne.n	8000f96 <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f022 0201 	bic.w	r2, r2, #1
 8000f54:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8000f56:	f7ff fca1 	bl	800089c <HAL_GetTick>
 8000f5a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f5c:	e014      	b.n	8000f88 <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000f5e:	f7ff fc9d 	bl	800089c <HAL_GetTick>
 8000f62:	4602      	mov	r2, r0
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	1ad3      	subs	r3, r2, r3
 8000f68:	2b02      	cmp	r3, #2
 8000f6a:	d90d      	bls.n	8000f88 <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f70:	f043 0210 	orr.w	r2, r3, #16
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f7c:	f043 0201 	orr.w	r2, r3, #1
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 8000f84:	2301      	movs	r3, #1
 8000f86:	e007      	b.n	8000f98 <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d0e3      	beq.n	8000f5e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000f96:	2300      	movs	r3, #0
}
 8000f98:	4618      	mov	r0, r3
 8000f9a:	3710      	adds	r7, #16
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b084      	sub	sp, #16
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fac:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d127      	bne.n	800100a <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8000fd0:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8000fd4:	d115      	bne.n	8001002 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d111      	bne.n	8001002 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fe2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000fe6:	68fb      	ldr	r3, [r7, #12]
 8000fe8:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d105      	bne.n	8001002 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	f043 0201 	orr.w	r2, r3, #1
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001002:	68f8      	ldr	r0, [r7, #12]
 8001004:	f7ff fe2c 	bl	8000c60 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001008:	e004      	b.n	8001014 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	4798      	blx	r3
}
 8001014:	bf00      	nop
 8001016:	3710      	adds	r7, #16
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}

0800101c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b084      	sub	sp, #16
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001028:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800102a:	68f8      	ldr	r0, [r7, #12]
 800102c:	f7ff fe21 	bl	8000c72 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001030:	bf00      	nop
 8001032:	3710      	adds	r7, #16
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800104a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800104e:	68fb      	ldr	r3, [r7, #12]
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001056:	f043 0204 	orr.w	r2, r3, #4
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f7ff fe10 	bl	8000c84 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}

0800106c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800106c:	b480      	push	{r7}
 800106e:	b085      	sub	sp, #20
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f003 0307 	and.w	r3, r3, #7
 800107a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001082:	68ba      	ldr	r2, [r7, #8]
 8001084:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001088:	4013      	ands	r3, r2
 800108a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001094:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800109c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800109e:	4a04      	ldr	r2, [pc, #16]	; (80010b0 <__NVIC_SetPriorityGrouping+0x44>)
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	60d3      	str	r3, [r2, #12]
}
 80010a4:	bf00      	nop
 80010a6:	3714      	adds	r7, #20
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bc80      	pop	{r7}
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	e000ed00 	.word	0xe000ed00

080010b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010b8:	4b04      	ldr	r3, [pc, #16]	; (80010cc <__NVIC_GetPriorityGrouping+0x18>)
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	0a1b      	lsrs	r3, r3, #8
 80010be:	f003 0307 	and.w	r3, r3, #7
}
 80010c2:	4618      	mov	r0, r3
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bc80      	pop	{r7}
 80010c8:	4770      	bx	lr
 80010ca:	bf00      	nop
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010de:	2b00      	cmp	r3, #0
 80010e0:	db0b      	blt.n	80010fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010e2:	79fb      	ldrb	r3, [r7, #7]
 80010e4:	f003 021f 	and.w	r2, r3, #31
 80010e8:	4906      	ldr	r1, [pc, #24]	; (8001104 <__NVIC_EnableIRQ+0x34>)
 80010ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ee:	095b      	lsrs	r3, r3, #5
 80010f0:	2001      	movs	r0, #1
 80010f2:	fa00 f202 	lsl.w	r2, r0, r2
 80010f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80010fa:	bf00      	nop
 80010fc:	370c      	adds	r7, #12
 80010fe:	46bd      	mov	sp, r7
 8001100:	bc80      	pop	{r7}
 8001102:	4770      	bx	lr
 8001104:	e000e100 	.word	0xe000e100

08001108 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	6039      	str	r1, [r7, #0]
 8001112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	db0a      	blt.n	8001132 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	b2da      	uxtb	r2, r3
 8001120:	490c      	ldr	r1, [pc, #48]	; (8001154 <__NVIC_SetPriority+0x4c>)
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	0112      	lsls	r2, r2, #4
 8001128:	b2d2      	uxtb	r2, r2
 800112a:	440b      	add	r3, r1
 800112c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001130:	e00a      	b.n	8001148 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	4908      	ldr	r1, [pc, #32]	; (8001158 <__NVIC_SetPriority+0x50>)
 8001138:	79fb      	ldrb	r3, [r7, #7]
 800113a:	f003 030f 	and.w	r3, r3, #15
 800113e:	3b04      	subs	r3, #4
 8001140:	0112      	lsls	r2, r2, #4
 8001142:	b2d2      	uxtb	r2, r2
 8001144:	440b      	add	r3, r1
 8001146:	761a      	strb	r2, [r3, #24]
}
 8001148:	bf00      	nop
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	e000e100 	.word	0xe000e100
 8001158:	e000ed00 	.word	0xe000ed00

0800115c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	; 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	f003 0307 	and.w	r3, r3, #7
 800116e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001170:	69fb      	ldr	r3, [r7, #28]
 8001172:	f1c3 0307 	rsb	r3, r3, #7
 8001176:	2b04      	cmp	r3, #4
 8001178:	bf28      	it	cs
 800117a:	2304      	movcs	r3, #4
 800117c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	3304      	adds	r3, #4
 8001182:	2b06      	cmp	r3, #6
 8001184:	d902      	bls.n	800118c <NVIC_EncodePriority+0x30>
 8001186:	69fb      	ldr	r3, [r7, #28]
 8001188:	3b03      	subs	r3, #3
 800118a:	e000      	b.n	800118e <NVIC_EncodePriority+0x32>
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001190:	f04f 32ff 	mov.w	r2, #4294967295
 8001194:	69bb      	ldr	r3, [r7, #24]
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43da      	mvns	r2, r3
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	401a      	ands	r2, r3
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011a4:	f04f 31ff 	mov.w	r1, #4294967295
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa01 f303 	lsl.w	r3, r1, r3
 80011ae:	43d9      	mvns	r1, r3
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b4:	4313      	orrs	r3, r2
         );
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3724      	adds	r7, #36	; 0x24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr

080011c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	3b01      	subs	r3, #1
 80011cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011d0:	d301      	bcc.n	80011d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d2:	2301      	movs	r3, #1
 80011d4:	e00f      	b.n	80011f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <SysTick_Config+0x40>)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	3b01      	subs	r3, #1
 80011dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011de:	210f      	movs	r1, #15
 80011e0:	f04f 30ff 	mov.w	r0, #4294967295
 80011e4:	f7ff ff90 	bl	8001108 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011e8:	4b05      	ldr	r3, [pc, #20]	; (8001200 <SysTick_Config+0x40>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011ee:	4b04      	ldr	r3, [pc, #16]	; (8001200 <SysTick_Config+0x40>)
 80011f0:	2207      	movs	r2, #7
 80011f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011f4:	2300      	movs	r3, #0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	e000e010 	.word	0xe000e010

08001204 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800120c:	6878      	ldr	r0, [r7, #4]
 800120e:	f7ff ff2d 	bl	800106c <__NVIC_SetPriorityGrouping>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800121a:	b580      	push	{r7, lr}
 800121c:	b086      	sub	sp, #24
 800121e:	af00      	add	r7, sp, #0
 8001220:	4603      	mov	r3, r0
 8001222:	60b9      	str	r1, [r7, #8]
 8001224:	607a      	str	r2, [r7, #4]
 8001226:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001228:	2300      	movs	r3, #0
 800122a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800122c:	f7ff ff42 	bl	80010b4 <__NVIC_GetPriorityGrouping>
 8001230:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001232:	687a      	ldr	r2, [r7, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	6978      	ldr	r0, [r7, #20]
 8001238:	f7ff ff90 	bl	800115c <NVIC_EncodePriority>
 800123c:	4602      	mov	r2, r0
 800123e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f7ff ff5f 	bl	8001108 <__NVIC_SetPriority>
}
 800124a:	bf00      	nop
 800124c:	3718      	adds	r7, #24
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800125c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff35 	bl	80010d0 <__NVIC_EnableIRQ>
}
 8001266:	bf00      	nop
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b082      	sub	sp, #8
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff ffa2 	bl	80011c0 <SysTick_Config>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001290:	2300      	movs	r3, #0
 8001292:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d101      	bne.n	800129e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e043      	b.n	8001326 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b22      	ldr	r3, [pc, #136]	; (8001330 <HAL_DMA_Init+0xa8>)
 80012a6:	4413      	add	r3, r2
 80012a8:	4a22      	ldr	r2, [pc, #136]	; (8001334 <HAL_DMA_Init+0xac>)
 80012aa:	fba2 2303 	umull	r2, r3, r2, r3
 80012ae:	091b      	lsrs	r3, r3, #4
 80012b0:	009a      	lsls	r2, r3, #2
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4a1f      	ldr	r2, [pc, #124]	; (8001338 <HAL_DMA_Init+0xb0>)
 80012ba:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2202      	movs	r2, #2
 80012c0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80012d2:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80012d6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80012e0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68fa      	ldr	r2, [r7, #12]
 800130c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	2200      	movs	r2, #0
 8001320:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3714      	adds	r7, #20
 800132a:	46bd      	mov	sp, r7
 800132c:	bc80      	pop	{r7}
 800132e:	4770      	bx	lr
 8001330:	bffdfff8 	.word	0xbffdfff8
 8001334:	cccccccd 	.word	0xcccccccd
 8001338:	40020000 	.word	0x40020000

0800133c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	60b9      	str	r1, [r7, #8]
 8001346:	607a      	str	r2, [r7, #4]
 8001348:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800134a:	2300      	movs	r3, #0
 800134c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d101      	bne.n	800135c <HAL_DMA_Start_IT+0x20>
 8001358:	2302      	movs	r3, #2
 800135a:	e04a      	b.n	80013f2 <HAL_DMA_Start_IT+0xb6>
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	2201      	movs	r2, #1
 8001360:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800136a:	2b01      	cmp	r3, #1
 800136c:	d13a      	bne.n	80013e4 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2202      	movs	r2, #2
 8001372:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	2200      	movs	r2, #0
 800137a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f022 0201 	bic.w	r2, r2, #1
 800138a:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	68b9      	ldr	r1, [r7, #8]
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 f938 	bl	8001608 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800139c:	2b00      	cmp	r3, #0
 800139e:	d008      	beq.n	80013b2 <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f042 020e 	orr.w	r2, r2, #14
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	e00f      	b.n	80013d2 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f022 0204 	bic.w	r2, r2, #4
 80013c0:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f042 020a 	orr.w	r2, r2, #10
 80013d0:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	681a      	ldr	r2, [r3, #0]
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f042 0201 	orr.w	r2, r2, #1
 80013e0:	601a      	str	r2, [r3, #0]
 80013e2:	e005      	b.n	80013f0 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	2200      	movs	r2, #0
 80013e8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80013ec:	2302      	movs	r3, #2
 80013ee:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80013f0:	7dfb      	ldrb	r3, [r7, #23]
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
	...

080013fc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b084      	sub	sp, #16
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	2204      	movs	r2, #4
 800141a:	409a      	lsls	r2, r3
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	4013      	ands	r3, r2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d04f      	beq.n	80014c4 <HAL_DMA_IRQHandler+0xc8>
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f003 0304 	and.w	r3, r3, #4
 800142a:	2b00      	cmp	r3, #0
 800142c:	d04a      	beq.n	80014c4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 0320 	and.w	r3, r3, #32
 8001438:	2b00      	cmp	r3, #0
 800143a:	d107      	bne.n	800144c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f022 0204 	bic.w	r2, r2, #4
 800144a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a66      	ldr	r2, [pc, #408]	; (80015ec <HAL_DMA_IRQHandler+0x1f0>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d029      	beq.n	80014aa <HAL_DMA_IRQHandler+0xae>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a65      	ldr	r2, [pc, #404]	; (80015f0 <HAL_DMA_IRQHandler+0x1f4>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d022      	beq.n	80014a6 <HAL_DMA_IRQHandler+0xaa>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4a63      	ldr	r2, [pc, #396]	; (80015f4 <HAL_DMA_IRQHandler+0x1f8>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d01a      	beq.n	80014a0 <HAL_DMA_IRQHandler+0xa4>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a62      	ldr	r2, [pc, #392]	; (80015f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d012      	beq.n	800149a <HAL_DMA_IRQHandler+0x9e>
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a60      	ldr	r2, [pc, #384]	; (80015fc <HAL_DMA_IRQHandler+0x200>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d00a      	beq.n	8001494 <HAL_DMA_IRQHandler+0x98>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a5f      	ldr	r2, [pc, #380]	; (8001600 <HAL_DMA_IRQHandler+0x204>)
 8001484:	4293      	cmp	r3, r2
 8001486:	d102      	bne.n	800148e <HAL_DMA_IRQHandler+0x92>
 8001488:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800148c:	e00e      	b.n	80014ac <HAL_DMA_IRQHandler+0xb0>
 800148e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001492:	e00b      	b.n	80014ac <HAL_DMA_IRQHandler+0xb0>
 8001494:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001498:	e008      	b.n	80014ac <HAL_DMA_IRQHandler+0xb0>
 800149a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800149e:	e005      	b.n	80014ac <HAL_DMA_IRQHandler+0xb0>
 80014a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80014a4:	e002      	b.n	80014ac <HAL_DMA_IRQHandler+0xb0>
 80014a6:	2340      	movs	r3, #64	; 0x40
 80014a8:	e000      	b.n	80014ac <HAL_DMA_IRQHandler+0xb0>
 80014aa:	2304      	movs	r3, #4
 80014ac:	4a55      	ldr	r2, [pc, #340]	; (8001604 <HAL_DMA_IRQHandler+0x208>)
 80014ae:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 8094 	beq.w	80015e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80014c2:	e08e      	b.n	80015e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c8:	2202      	movs	r2, #2
 80014ca:	409a      	lsls	r2, r3
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d056      	beq.n	8001582 <HAL_DMA_IRQHandler+0x186>
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d051      	beq.n	8001582 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f003 0320 	and.w	r3, r3, #32
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d10b      	bne.n	8001504 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f022 020a 	bic.w	r2, r2, #10
 80014fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a38      	ldr	r2, [pc, #224]	; (80015ec <HAL_DMA_IRQHandler+0x1f0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d029      	beq.n	8001562 <HAL_DMA_IRQHandler+0x166>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4a37      	ldr	r2, [pc, #220]	; (80015f0 <HAL_DMA_IRQHandler+0x1f4>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d022      	beq.n	800155e <HAL_DMA_IRQHandler+0x162>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4a35      	ldr	r2, [pc, #212]	; (80015f4 <HAL_DMA_IRQHandler+0x1f8>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d01a      	beq.n	8001558 <HAL_DMA_IRQHandler+0x15c>
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a34      	ldr	r2, [pc, #208]	; (80015f8 <HAL_DMA_IRQHandler+0x1fc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d012      	beq.n	8001552 <HAL_DMA_IRQHandler+0x156>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a32      	ldr	r2, [pc, #200]	; (80015fc <HAL_DMA_IRQHandler+0x200>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00a      	beq.n	800154c <HAL_DMA_IRQHandler+0x150>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	4a31      	ldr	r2, [pc, #196]	; (8001600 <HAL_DMA_IRQHandler+0x204>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d102      	bne.n	8001546 <HAL_DMA_IRQHandler+0x14a>
 8001540:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001544:	e00e      	b.n	8001564 <HAL_DMA_IRQHandler+0x168>
 8001546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800154a:	e00b      	b.n	8001564 <HAL_DMA_IRQHandler+0x168>
 800154c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001550:	e008      	b.n	8001564 <HAL_DMA_IRQHandler+0x168>
 8001552:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001556:	e005      	b.n	8001564 <HAL_DMA_IRQHandler+0x168>
 8001558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800155c:	e002      	b.n	8001564 <HAL_DMA_IRQHandler+0x168>
 800155e:	2320      	movs	r3, #32
 8001560:	e000      	b.n	8001564 <HAL_DMA_IRQHandler+0x168>
 8001562:	2302      	movs	r3, #2
 8001564:	4a27      	ldr	r2, [pc, #156]	; (8001604 <HAL_DMA_IRQHandler+0x208>)
 8001566:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	2b00      	cmp	r3, #0
 8001576:	d034      	beq.n	80015e2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001580:	e02f      	b.n	80015e2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	2208      	movs	r2, #8
 8001588:	409a      	lsls	r2, r3
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	4013      	ands	r3, r2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d028      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x1e8>
 8001592:	68bb      	ldr	r3, [r7, #8]
 8001594:	f003 0308 	and.w	r3, r3, #8
 8001598:	2b00      	cmp	r3, #0
 800159a:	d023      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f022 020e 	bic.w	r2, r2, #14
 80015aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b4:	2101      	movs	r1, #1
 80015b6:	fa01 f202 	lsl.w	r2, r1, r2
 80015ba:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2201      	movs	r2, #1
 80015c0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2201      	movs	r2, #1
 80015c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2200      	movs	r2, #0
 80015ce:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d004      	beq.n	80015e4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	4798      	blx	r3
    }
  }
  return;
 80015e2:	bf00      	nop
 80015e4:	bf00      	nop
}
 80015e6:	3710      	adds	r7, #16
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40020008 	.word	0x40020008
 80015f0:	4002001c 	.word	0x4002001c
 80015f4:	40020030 	.word	0x40020030
 80015f8:	40020044 	.word	0x40020044
 80015fc:	40020058 	.word	0x40020058
 8001600:	4002006c 	.word	0x4002006c
 8001604:	40020000 	.word	0x40020000

08001608 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001608:	b480      	push	{r7}
 800160a:	b085      	sub	sp, #20
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	60b9      	str	r1, [r7, #8]
 8001612:	607a      	str	r2, [r7, #4]
 8001614:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161e:	2101      	movs	r1, #1
 8001620:	fa01 f202 	lsl.w	r2, r1, r2
 8001624:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	2b10      	cmp	r3, #16
 8001634:	d108      	bne.n	8001648 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68ba      	ldr	r2, [r7, #8]
 8001644:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001646:	e007      	b.n	8001658 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	68ba      	ldr	r2, [r7, #8]
 800164e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	60da      	str	r2, [r3, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	bc80      	pop	{r7}
 8001660:	4770      	bx	lr
	...

08001664 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001664:	b480      	push	{r7}
 8001666:	b08b      	sub	sp, #44	; 0x2c
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800166e:	2300      	movs	r3, #0
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001672:	2300      	movs	r3, #0
 8001674:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001676:	e127      	b.n	80018c8 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001678:	2201      	movs	r2, #1
 800167a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	69fa      	ldr	r2, [r7, #28]
 8001688:	4013      	ands	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	429a      	cmp	r2, r3
 8001692:	f040 8116 	bne.w	80018c2 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	2b12      	cmp	r3, #18
 800169c:	d034      	beq.n	8001708 <HAL_GPIO_Init+0xa4>
 800169e:	2b12      	cmp	r3, #18
 80016a0:	d80d      	bhi.n	80016be <HAL_GPIO_Init+0x5a>
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d02b      	beq.n	80016fe <HAL_GPIO_Init+0x9a>
 80016a6:	2b02      	cmp	r3, #2
 80016a8:	d804      	bhi.n	80016b4 <HAL_GPIO_Init+0x50>
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d031      	beq.n	8001712 <HAL_GPIO_Init+0xae>
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d01c      	beq.n	80016ec <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80016b2:	e048      	b.n	8001746 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016b4:	2b03      	cmp	r3, #3
 80016b6:	d043      	beq.n	8001740 <HAL_GPIO_Init+0xdc>
 80016b8:	2b11      	cmp	r3, #17
 80016ba:	d01b      	beq.n	80016f4 <HAL_GPIO_Init+0x90>
          break;
 80016bc:	e043      	b.n	8001746 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016be:	4a89      	ldr	r2, [pc, #548]	; (80018e4 <HAL_GPIO_Init+0x280>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d026      	beq.n	8001712 <HAL_GPIO_Init+0xae>
 80016c4:	4a87      	ldr	r2, [pc, #540]	; (80018e4 <HAL_GPIO_Init+0x280>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d806      	bhi.n	80016d8 <HAL_GPIO_Init+0x74>
 80016ca:	4a87      	ldr	r2, [pc, #540]	; (80018e8 <HAL_GPIO_Init+0x284>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d020      	beq.n	8001712 <HAL_GPIO_Init+0xae>
 80016d0:	4a86      	ldr	r2, [pc, #536]	; (80018ec <HAL_GPIO_Init+0x288>)
 80016d2:	4293      	cmp	r3, r2
 80016d4:	d01d      	beq.n	8001712 <HAL_GPIO_Init+0xae>
          break;
 80016d6:	e036      	b.n	8001746 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80016d8:	4a85      	ldr	r2, [pc, #532]	; (80018f0 <HAL_GPIO_Init+0x28c>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d019      	beq.n	8001712 <HAL_GPIO_Init+0xae>
 80016de:	4a85      	ldr	r2, [pc, #532]	; (80018f4 <HAL_GPIO_Init+0x290>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d016      	beq.n	8001712 <HAL_GPIO_Init+0xae>
 80016e4:	4a84      	ldr	r2, [pc, #528]	; (80018f8 <HAL_GPIO_Init+0x294>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d013      	beq.n	8001712 <HAL_GPIO_Init+0xae>
          break;
 80016ea:	e02c      	b.n	8001746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	623b      	str	r3, [r7, #32]
          break;
 80016f2:	e028      	b.n	8001746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	3304      	adds	r3, #4
 80016fa:	623b      	str	r3, [r7, #32]
          break;
 80016fc:	e023      	b.n	8001746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	68db      	ldr	r3, [r3, #12]
 8001702:	3308      	adds	r3, #8
 8001704:	623b      	str	r3, [r7, #32]
          break;
 8001706:	e01e      	b.n	8001746 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	330c      	adds	r3, #12
 800170e:	623b      	str	r3, [r7, #32]
          break;
 8001710:	e019      	b.n	8001746 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d102      	bne.n	8001720 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800171a:	2304      	movs	r3, #4
 800171c:	623b      	str	r3, [r7, #32]
          break;
 800171e:	e012      	b.n	8001746 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d105      	bne.n	8001734 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001728:	2308      	movs	r3, #8
 800172a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69fa      	ldr	r2, [r7, #28]
 8001730:	611a      	str	r2, [r3, #16]
          break;
 8001732:	e008      	b.n	8001746 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001734:	2308      	movs	r3, #8
 8001736:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	69fa      	ldr	r2, [r7, #28]
 800173c:	615a      	str	r2, [r3, #20]
          break;
 800173e:	e002      	b.n	8001746 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001740:	2300      	movs	r3, #0
 8001742:	623b      	str	r3, [r7, #32]
          break;
 8001744:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2bff      	cmp	r3, #255	; 0xff
 800174a:	d801      	bhi.n	8001750 <HAL_GPIO_Init+0xec>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	e001      	b.n	8001754 <HAL_GPIO_Init+0xf0>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	3304      	adds	r3, #4
 8001754:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	2bff      	cmp	r3, #255	; 0xff
 800175a:	d802      	bhi.n	8001762 <HAL_GPIO_Init+0xfe>
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	e002      	b.n	8001768 <HAL_GPIO_Init+0x104>
 8001762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001764:	3b08      	subs	r3, #8
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	210f      	movs	r1, #15
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43db      	mvns	r3, r3
 8001778:	401a      	ands	r2, r3
 800177a:	6a39      	ldr	r1, [r7, #32]
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	431a      	orrs	r2, r3
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001790:	2b00      	cmp	r3, #0
 8001792:	f000 8096 	beq.w	80018c2 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001796:	4b59      	ldr	r3, [pc, #356]	; (80018fc <HAL_GPIO_Init+0x298>)
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	4a58      	ldr	r2, [pc, #352]	; (80018fc <HAL_GPIO_Init+0x298>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6193      	str	r3, [r2, #24]
 80017a2:	4b56      	ldr	r3, [pc, #344]	; (80018fc <HAL_GPIO_Init+0x298>)
 80017a4:	699b      	ldr	r3, [r3, #24]
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80017ae:	4a54      	ldr	r2, [pc, #336]	; (8001900 <HAL_GPIO_Init+0x29c>)
 80017b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017b2:	089b      	lsrs	r3, r3, #2
 80017b4:	3302      	adds	r3, #2
 80017b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ba:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80017bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017be:	f003 0303 	and.w	r3, r3, #3
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	220f      	movs	r2, #15
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	68fa      	ldr	r2, [r7, #12]
 80017ce:	4013      	ands	r3, r2
 80017d0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a4b      	ldr	r2, [pc, #300]	; (8001904 <HAL_GPIO_Init+0x2a0>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d013      	beq.n	8001802 <HAL_GPIO_Init+0x19e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a4a      	ldr	r2, [pc, #296]	; (8001908 <HAL_GPIO_Init+0x2a4>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d00d      	beq.n	80017fe <HAL_GPIO_Init+0x19a>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a49      	ldr	r2, [pc, #292]	; (800190c <HAL_GPIO_Init+0x2a8>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d007      	beq.n	80017fa <HAL_GPIO_Init+0x196>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a48      	ldr	r2, [pc, #288]	; (8001910 <HAL_GPIO_Init+0x2ac>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d101      	bne.n	80017f6 <HAL_GPIO_Init+0x192>
 80017f2:	2303      	movs	r3, #3
 80017f4:	e006      	b.n	8001804 <HAL_GPIO_Init+0x1a0>
 80017f6:	2304      	movs	r3, #4
 80017f8:	e004      	b.n	8001804 <HAL_GPIO_Init+0x1a0>
 80017fa:	2302      	movs	r3, #2
 80017fc:	e002      	b.n	8001804 <HAL_GPIO_Init+0x1a0>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <HAL_GPIO_Init+0x1a0>
 8001802:	2300      	movs	r3, #0
 8001804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001806:	f002 0203 	and.w	r2, r2, #3
 800180a:	0092      	lsls	r2, r2, #2
 800180c:	4093      	lsls	r3, r2
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	4313      	orrs	r3, r2
 8001812:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001814:	493a      	ldr	r1, [pc, #232]	; (8001900 <HAL_GPIO_Init+0x29c>)
 8001816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001818:	089b      	lsrs	r3, r3, #2
 800181a:	3302      	adds	r3, #2
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800182a:	2b00      	cmp	r3, #0
 800182c:	d006      	beq.n	800183c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800182e:	4b39      	ldr	r3, [pc, #228]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4938      	ldr	r1, [pc, #224]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 8001834:	69bb      	ldr	r3, [r7, #24]
 8001836:	4313      	orrs	r3, r2
 8001838:	600b      	str	r3, [r1, #0]
 800183a:	e006      	b.n	800184a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800183c:	4b35      	ldr	r3, [pc, #212]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	69bb      	ldr	r3, [r7, #24]
 8001842:	43db      	mvns	r3, r3
 8001844:	4933      	ldr	r1, [pc, #204]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 8001846:	4013      	ands	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d006      	beq.n	8001864 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001856:	4b2f      	ldr	r3, [pc, #188]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 8001858:	685a      	ldr	r2, [r3, #4]
 800185a:	492e      	ldr	r1, [pc, #184]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	4313      	orrs	r3, r2
 8001860:	604b      	str	r3, [r1, #4]
 8001862:	e006      	b.n	8001872 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001864:	4b2b      	ldr	r3, [pc, #172]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	43db      	mvns	r3, r3
 800186c:	4929      	ldr	r1, [pc, #164]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 800186e:	4013      	ands	r3, r2
 8001870:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187a:	2b00      	cmp	r3, #0
 800187c:	d006      	beq.n	800188c <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800187e:	4b25      	ldr	r3, [pc, #148]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 8001880:	689a      	ldr	r2, [r3, #8]
 8001882:	4924      	ldr	r1, [pc, #144]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 8001884:	69bb      	ldr	r3, [r7, #24]
 8001886:	4313      	orrs	r3, r2
 8001888:	608b      	str	r3, [r1, #8]
 800188a:	e006      	b.n	800189a <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800188c:	4b21      	ldr	r3, [pc, #132]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	43db      	mvns	r3, r3
 8001894:	491f      	ldr	r1, [pc, #124]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 8001896:	4013      	ands	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d006      	beq.n	80018b4 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80018a6:	4b1b      	ldr	r3, [pc, #108]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 80018a8:	68da      	ldr	r2, [r3, #12]
 80018aa:	491a      	ldr	r1, [pc, #104]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 80018ac:	69bb      	ldr	r3, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60cb      	str	r3, [r1, #12]
 80018b2:	e006      	b.n	80018c2 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80018b4:	4b17      	ldr	r3, [pc, #92]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 80018b6:	68da      	ldr	r2, [r3, #12]
 80018b8:	69bb      	ldr	r3, [r7, #24]
 80018ba:	43db      	mvns	r3, r3
 80018bc:	4915      	ldr	r1, [pc, #84]	; (8001914 <HAL_GPIO_Init+0x2b0>)
 80018be:	4013      	ands	r3, r2
 80018c0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	3301      	adds	r3, #1
 80018c6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	681a      	ldr	r2, [r3, #0]
 80018cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	f47f aed0 	bne.w	8001678 <HAL_GPIO_Init+0x14>
  }
}
 80018d8:	bf00      	nop
 80018da:	372c      	adds	r7, #44	; 0x2c
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	10210000 	.word	0x10210000
 80018e8:	10110000 	.word	0x10110000
 80018ec:	10120000 	.word	0x10120000
 80018f0:	10310000 	.word	0x10310000
 80018f4:	10320000 	.word	0x10320000
 80018f8:	10220000 	.word	0x10220000
 80018fc:	40021000 	.word	0x40021000
 8001900:	40010000 	.word	0x40010000
 8001904:	40010800 	.word	0x40010800
 8001908:	40010c00 	.word	0x40010c00
 800190c:	40011000 	.word	0x40011000
 8001910:	40011400 	.word	0x40011400
 8001914:	40010400 	.word	0x40010400

08001918 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
 8001920:	460b      	mov	r3, r1
 8001922:	807b      	strh	r3, [r7, #2]
 8001924:	4613      	mov	r3, r2
 8001926:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001928:	787b      	ldrb	r3, [r7, #1]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d003      	beq.n	8001936 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800192e:	887a      	ldrh	r2, [r7, #2]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001934:	e003      	b.n	800193e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001936:	887b      	ldrh	r3, [r7, #2]
 8001938:	041a      	lsls	r2, r3, #16
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	611a      	str	r2, [r3, #16]
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	bc80      	pop	{r7}
 8001946:	4770      	bx	lr

08001948 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	887b      	ldrh	r3, [r7, #2]
 800195a:	4013      	ands	r3, r2
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001960:	887a      	ldrh	r2, [r7, #2]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8001966:	e002      	b.n	800196e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001968:	887a      	ldrh	r2, [r7, #2]
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	611a      	str	r2, [r3, #16]
}
 800196e:	bf00      	nop
 8001970:	370c      	adds	r7, #12
 8001972:	46bd      	mov	sp, r7
 8001974:	bc80      	pop	{r7}
 8001976:	4770      	bx	lr

08001978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b086      	sub	sp, #24
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d101      	bne.n	800198a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001986:	2301      	movs	r3, #1
 8001988:	e26c      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	2b00      	cmp	r3, #0
 8001994:	f000 8087 	beq.w	8001aa6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001998:	4b92      	ldr	r3, [pc, #584]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 800199a:	685b      	ldr	r3, [r3, #4]
 800199c:	f003 030c 	and.w	r3, r3, #12
 80019a0:	2b04      	cmp	r3, #4
 80019a2:	d00c      	beq.n	80019be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80019a4:	4b8f      	ldr	r3, [pc, #572]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	f003 030c 	and.w	r3, r3, #12
 80019ac:	2b08      	cmp	r3, #8
 80019ae:	d112      	bne.n	80019d6 <HAL_RCC_OscConfig+0x5e>
 80019b0:	4b8c      	ldr	r3, [pc, #560]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019bc:	d10b      	bne.n	80019d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019be:	4b89      	ldr	r3, [pc, #548]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d06c      	beq.n	8001aa4 <HAL_RCC_OscConfig+0x12c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d168      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e246      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80019de:	d106      	bne.n	80019ee <HAL_RCC_OscConfig+0x76>
 80019e0:	4b80      	ldr	r3, [pc, #512]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a7f      	ldr	r2, [pc, #508]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	e02e      	b.n	8001a4c <HAL_RCC_OscConfig+0xd4>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10c      	bne.n	8001a10 <HAL_RCC_OscConfig+0x98>
 80019f6:	4b7b      	ldr	r3, [pc, #492]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a7a      	ldr	r2, [pc, #488]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 80019fc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a00:	6013      	str	r3, [r2, #0]
 8001a02:	4b78      	ldr	r3, [pc, #480]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a77      	ldr	r2, [pc, #476]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a08:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a0c:	6013      	str	r3, [r2, #0]
 8001a0e:	e01d      	b.n	8001a4c <HAL_RCC_OscConfig+0xd4>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a18:	d10c      	bne.n	8001a34 <HAL_RCC_OscConfig+0xbc>
 8001a1a:	4b72      	ldr	r3, [pc, #456]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a71      	ldr	r2, [pc, #452]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a24:	6013      	str	r3, [r2, #0]
 8001a26:	4b6f      	ldr	r3, [pc, #444]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a6e      	ldr	r2, [pc, #440]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a30:	6013      	str	r3, [r2, #0]
 8001a32:	e00b      	b.n	8001a4c <HAL_RCC_OscConfig+0xd4>
 8001a34:	4b6b      	ldr	r3, [pc, #428]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a6a      	ldr	r2, [pc, #424]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a3e:	6013      	str	r3, [r2, #0]
 8001a40:	4b68      	ldr	r3, [pc, #416]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a67      	ldr	r2, [pc, #412]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a4a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d013      	beq.n	8001a7c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a54:	f7fe ff22 	bl	800089c <HAL_GetTick>
 8001a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a5a:	e008      	b.n	8001a6e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a5c:	f7fe ff1e 	bl	800089c <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	2b64      	cmp	r3, #100	; 0x64
 8001a68:	d901      	bls.n	8001a6e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e1fa      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a6e:	4b5d      	ldr	r3, [pc, #372]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d0f0      	beq.n	8001a5c <HAL_RCC_OscConfig+0xe4>
 8001a7a:	e014      	b.n	8001aa6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a7c:	f7fe ff0e 	bl	800089c <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a84:	f7fe ff0a 	bl	800089c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b64      	cmp	r3, #100	; 0x64
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e1e6      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001a96:	4b53      	ldr	r3, [pc, #332]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x10c>
 8001aa2:	e000      	b.n	8001aa6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d063      	beq.n	8001b7a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ab2:	4b4c      	ldr	r3, [pc, #304]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 030c 	and.w	r3, r3, #12
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00b      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001abe:	4b49      	ldr	r3, [pc, #292]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 030c 	and.w	r3, r3, #12
 8001ac6:	2b08      	cmp	r3, #8
 8001ac8:	d11c      	bne.n	8001b04 <HAL_RCC_OscConfig+0x18c>
 8001aca:	4b46      	ldr	r3, [pc, #280]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d116      	bne.n	8001b04 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ad6:	4b43      	ldr	r3, [pc, #268]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_RCC_OscConfig+0x176>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	691b      	ldr	r3, [r3, #16]
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d001      	beq.n	8001aee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e1ba      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001aee:	4b3d      	ldr	r3, [pc, #244]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	00db      	lsls	r3, r3, #3
 8001afc:	4939      	ldr	r1, [pc, #228]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001afe:	4313      	orrs	r3, r2
 8001b00:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b02:	e03a      	b.n	8001b7a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	691b      	ldr	r3, [r3, #16]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d020      	beq.n	8001b4e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b0c:	4b36      	ldr	r3, [pc, #216]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	2201      	movs	r2, #1
 8001b10:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b12:	f7fe fec3 	bl	800089c <HAL_GetTick>
 8001b16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b18:	e008      	b.n	8001b2c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b1a:	f7fe febf 	bl	800089c <HAL_GetTick>
 8001b1e:	4602      	mov	r2, r0
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	1ad3      	subs	r3, r2, r3
 8001b24:	2b02      	cmp	r3, #2
 8001b26:	d901      	bls.n	8001b2c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001b28:	2303      	movs	r3, #3
 8001b2a:	e19b      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b2c:	4b2d      	ldr	r3, [pc, #180]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d0f0      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b38:	4b2a      	ldr	r3, [pc, #168]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	695b      	ldr	r3, [r3, #20]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4927      	ldr	r1, [pc, #156]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	600b      	str	r3, [r1, #0]
 8001b4c:	e015      	b.n	8001b7a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <HAL_RCC_OscConfig+0x270>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b54:	f7fe fea2 	bl	800089c <HAL_GetTick>
 8001b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5c:	f7fe fe9e 	bl	800089c <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e17a      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001b6e:	4b1d      	ldr	r3, [pc, #116]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f0      	bne.n	8001b5c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0308 	and.w	r3, r3, #8
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d03a      	beq.n	8001bfc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	699b      	ldr	r3, [r3, #24]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d019      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <HAL_RCC_OscConfig+0x274>)
 8001b90:	2201      	movs	r2, #1
 8001b92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b94:	f7fe fe82 	bl	800089c <HAL_GetTick>
 8001b98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b9a:	e008      	b.n	8001bae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b9c:	f7fe fe7e 	bl	800089c <HAL_GetTick>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	693b      	ldr	r3, [r7, #16]
 8001ba4:	1ad3      	subs	r3, r2, r3
 8001ba6:	2b02      	cmp	r3, #2
 8001ba8:	d901      	bls.n	8001bae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001baa:	2303      	movs	r3, #3
 8001bac:	e15a      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001bae:	4b0d      	ldr	r3, [pc, #52]	; (8001be4 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	f003 0302 	and.w	r3, r3, #2
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d0f0      	beq.n	8001b9c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f000 fada 	bl	8002174 <RCC_Delay>
 8001bc0:	e01c      	b.n	8001bfc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <HAL_RCC_OscConfig+0x274>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001bc8:	f7fe fe68 	bl	800089c <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bce:	e00f      	b.n	8001bf0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bd0:	f7fe fe64 	bl	800089c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d908      	bls.n	8001bf0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e140      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
 8001be2:	bf00      	nop
 8001be4:	40021000 	.word	0x40021000
 8001be8:	42420000 	.word	0x42420000
 8001bec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001bf0:	4b9e      	ldr	r3, [pc, #632]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d1e9      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0304 	and.w	r3, r3, #4
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	f000 80a6 	beq.w	8001d56 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c0e:	4b97      	ldr	r3, [pc, #604]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d10d      	bne.n	8001c36 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c1a:	4b94      	ldr	r3, [pc, #592]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001c1c:	69db      	ldr	r3, [r3, #28]
 8001c1e:	4a93      	ldr	r2, [pc, #588]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001c20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c24:	61d3      	str	r3, [r2, #28]
 8001c26:	4b91      	ldr	r3, [pc, #580]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	60bb      	str	r3, [r7, #8]
 8001c30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001c32:	2301      	movs	r3, #1
 8001c34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c36:	4b8e      	ldr	r3, [pc, #568]	; (8001e70 <HAL_RCC_OscConfig+0x4f8>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d118      	bne.n	8001c74 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001c42:	4b8b      	ldr	r3, [pc, #556]	; (8001e70 <HAL_RCC_OscConfig+0x4f8>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a8a      	ldr	r2, [pc, #552]	; (8001e70 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001c4e:	f7fe fe25 	bl	800089c <HAL_GetTick>
 8001c52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c54:	e008      	b.n	8001c68 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c56:	f7fe fe21 	bl	800089c <HAL_GetTick>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b64      	cmp	r3, #100	; 0x64
 8001c62:	d901      	bls.n	8001c68 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0fd      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001c68:	4b81      	ldr	r3, [pc, #516]	; (8001e70 <HAL_RCC_OscConfig+0x4f8>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d0f0      	beq.n	8001c56 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d106      	bne.n	8001c8a <HAL_RCC_OscConfig+0x312>
 8001c7c:	4b7b      	ldr	r3, [pc, #492]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001c7e:	6a1b      	ldr	r3, [r3, #32]
 8001c80:	4a7a      	ldr	r2, [pc, #488]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001c82:	f043 0301 	orr.w	r3, r3, #1
 8001c86:	6213      	str	r3, [r2, #32]
 8001c88:	e02d      	b.n	8001ce6 <HAL_RCC_OscConfig+0x36e>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	68db      	ldr	r3, [r3, #12]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10c      	bne.n	8001cac <HAL_RCC_OscConfig+0x334>
 8001c92:	4b76      	ldr	r3, [pc, #472]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	4a75      	ldr	r2, [pc, #468]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	f023 0301 	bic.w	r3, r3, #1
 8001c9c:	6213      	str	r3, [r2, #32]
 8001c9e:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	4a72      	ldr	r2, [pc, #456]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001ca4:	f023 0304 	bic.w	r3, r3, #4
 8001ca8:	6213      	str	r3, [r2, #32]
 8001caa:	e01c      	b.n	8001ce6 <HAL_RCC_OscConfig+0x36e>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68db      	ldr	r3, [r3, #12]
 8001cb0:	2b05      	cmp	r3, #5
 8001cb2:	d10c      	bne.n	8001cce <HAL_RCC_OscConfig+0x356>
 8001cb4:	4b6d      	ldr	r3, [pc, #436]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	4a6c      	ldr	r2, [pc, #432]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6213      	str	r3, [r2, #32]
 8001cc0:	4b6a      	ldr	r3, [pc, #424]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	4a69      	ldr	r2, [pc, #420]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001cc6:	f043 0301 	orr.w	r3, r3, #1
 8001cca:	6213      	str	r3, [r2, #32]
 8001ccc:	e00b      	b.n	8001ce6 <HAL_RCC_OscConfig+0x36e>
 8001cce:	4b67      	ldr	r3, [pc, #412]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	4a66      	ldr	r2, [pc, #408]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001cd4:	f023 0301 	bic.w	r3, r3, #1
 8001cd8:	6213      	str	r3, [r2, #32]
 8001cda:	4b64      	ldr	r3, [pc, #400]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	4a63      	ldr	r2, [pc, #396]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001ce0:	f023 0304 	bic.w	r3, r3, #4
 8001ce4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	68db      	ldr	r3, [r3, #12]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d015      	beq.n	8001d1a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cee:	f7fe fdd5 	bl	800089c <HAL_GetTick>
 8001cf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cf4:	e00a      	b.n	8001d0c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cf6:	f7fe fdd1 	bl	800089c <HAL_GetTick>
 8001cfa:	4602      	mov	r2, r0
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	1ad3      	subs	r3, r2, r3
 8001d00:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d901      	bls.n	8001d0c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d08:	2303      	movs	r3, #3
 8001d0a:	e0ab      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d0c:	4b57      	ldr	r3, [pc, #348]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001d0e:	6a1b      	ldr	r3, [r3, #32]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d0ee      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x37e>
 8001d18:	e014      	b.n	8001d44 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d1a:	f7fe fdbf 	bl	800089c <HAL_GetTick>
 8001d1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d20:	e00a      	b.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d22:	f7fe fdbb 	bl	800089c <HAL_GetTick>
 8001d26:	4602      	mov	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d901      	bls.n	8001d38 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001d34:	2303      	movs	r3, #3
 8001d36:	e095      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d38:	4b4c      	ldr	r3, [pc, #304]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	f003 0302 	and.w	r3, r3, #2
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d1ee      	bne.n	8001d22 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001d44:	7dfb      	ldrb	r3, [r7, #23]
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d4a:	4b48      	ldr	r3, [pc, #288]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4a47      	ldr	r2, [pc, #284]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001d50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d54:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	69db      	ldr	r3, [r3, #28]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f000 8081 	beq.w	8001e62 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001d60:	4b42      	ldr	r3, [pc, #264]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f003 030c 	and.w	r3, r3, #12
 8001d68:	2b08      	cmp	r3, #8
 8001d6a:	d061      	beq.n	8001e30 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	69db      	ldr	r3, [r3, #28]
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d146      	bne.n	8001e02 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d74:	4b3f      	ldr	r3, [pc, #252]	; (8001e74 <HAL_RCC_OscConfig+0x4fc>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d7a:	f7fe fd8f 	bl	800089c <HAL_GetTick>
 8001d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d80:	e008      	b.n	8001d94 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d82:	f7fe fd8b 	bl	800089c <HAL_GetTick>
 8001d86:	4602      	mov	r2, r0
 8001d88:	693b      	ldr	r3, [r7, #16]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	2b02      	cmp	r3, #2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e067      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d94:	4b35      	ldr	r3, [pc, #212]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d1f0      	bne.n	8001d82 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6a1b      	ldr	r3, [r3, #32]
 8001da4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da8:	d108      	bne.n	8001dbc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001daa:	4b30      	ldr	r3, [pc, #192]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	685b      	ldr	r3, [r3, #4]
 8001dae:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	492d      	ldr	r1, [pc, #180]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dbc:	4b2b      	ldr	r3, [pc, #172]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a19      	ldr	r1, [r3, #32]
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dcc:	430b      	orrs	r3, r1
 8001dce:	4927      	ldr	r1, [pc, #156]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001dd4:	4b27      	ldr	r3, [pc, #156]	; (8001e74 <HAL_RCC_OscConfig+0x4fc>)
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dda:	f7fe fd5f 	bl	800089c <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001de0:	e008      	b.n	8001df4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de2:	f7fe fd5b 	bl	800089c <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d901      	bls.n	8001df4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001df0:	2303      	movs	r3, #3
 8001df2:	e037      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001df4:	4b1d      	ldr	r3, [pc, #116]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d0f0      	beq.n	8001de2 <HAL_RCC_OscConfig+0x46a>
 8001e00:	e02f      	b.n	8001e62 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <HAL_RCC_OscConfig+0x4fc>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e08:	f7fe fd48 	bl	800089c <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e10:	f7fe fd44 	bl	800089c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e020      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e22:	4b12      	ldr	r3, [pc, #72]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d1f0      	bne.n	8001e10 <HAL_RCC_OscConfig+0x498>
 8001e2e:	e018      	b.n	8001e62 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	2b01      	cmp	r3, #1
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e013      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001e3c:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <HAL_RCC_OscConfig+0x4f4>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6a1b      	ldr	r3, [r3, #32]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d106      	bne.n	8001e5e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3718      	adds	r7, #24
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	40007000 	.word	0x40007000
 8001e74:	42420060 	.word	0x42420060

08001e78 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d101      	bne.n	8001e8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e0d0      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e8c:	4b6a      	ldr	r3, [pc, #424]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0307 	and.w	r3, r3, #7
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d910      	bls.n	8001ebc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9a:	4b67      	ldr	r3, [pc, #412]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f023 0207 	bic.w	r2, r3, #7
 8001ea2:	4965      	ldr	r1, [pc, #404]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	4313      	orrs	r3, r2
 8001ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eaa:	4b63      	ldr	r3, [pc, #396]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0307 	and.w	r3, r3, #7
 8001eb2:	683a      	ldr	r2, [r7, #0]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d001      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001eb8:	2301      	movs	r3, #1
 8001eba:	e0b8      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d020      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f003 0304 	and.w	r3, r3, #4
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d005      	beq.n	8001ee0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ed4:	4b59      	ldr	r3, [pc, #356]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	4a58      	ldr	r2, [pc, #352]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001eda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001ede:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d005      	beq.n	8001ef8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001eec:	4b53      	ldr	r3, [pc, #332]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	4a52      	ldr	r2, [pc, #328]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001ef2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001ef6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef8:	4b50      	ldr	r3, [pc, #320]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	494d      	ldr	r1, [pc, #308]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d040      	beq.n	8001f98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d107      	bne.n	8001f2e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f1e:	4b47      	ldr	r3, [pc, #284]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d115      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07f      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	2b02      	cmp	r3, #2
 8001f34:	d107      	bne.n	8001f46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f36:	4b41      	ldr	r3, [pc, #260]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d109      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	e073      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f46:	4b3d      	ldr	r3, [pc, #244]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d101      	bne.n	8001f56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e06b      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f56:	4b39      	ldr	r3, [pc, #228]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	f023 0203 	bic.w	r2, r3, #3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	4936      	ldr	r1, [pc, #216]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f64:	4313      	orrs	r3, r2
 8001f66:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f68:	f7fe fc98 	bl	800089c <HAL_GetTick>
 8001f6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6e:	e00a      	b.n	8001f86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f70:	f7fe fc94 	bl	800089c <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d901      	bls.n	8001f86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e053      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f86:	4b2d      	ldr	r3, [pc, #180]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 020c 	and.w	r2, r3, #12
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d1eb      	bne.n	8001f70 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f98:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	683a      	ldr	r2, [r7, #0]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d210      	bcs.n	8001fc8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f023 0207 	bic.w	r2, r3, #7
 8001fae:	4922      	ldr	r1, [pc, #136]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_RCC_ClockConfig+0x1c0>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	683a      	ldr	r2, [r7, #0]
 8001fc0:	429a      	cmp	r2, r3
 8001fc2:	d001      	beq.n	8001fc8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	e032      	b.n	800202e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f003 0304 	and.w	r3, r3, #4
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d008      	beq.n	8001fe6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd4:	4b19      	ldr	r3, [pc, #100]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd6:	685b      	ldr	r3, [r3, #4]
 8001fd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	4916      	ldr	r1, [pc, #88]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 0308 	and.w	r3, r3, #8
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001ff2:	4b12      	ldr	r3, [pc, #72]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	490e      	ldr	r1, [pc, #56]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 8002002:	4313      	orrs	r3, r2
 8002004:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002006:	f000 f821 	bl	800204c <HAL_RCC_GetSysClockFreq>
 800200a:	4601      	mov	r1, r0
 800200c:	4b0b      	ldr	r3, [pc, #44]	; (800203c <HAL_RCC_ClockConfig+0x1c4>)
 800200e:	685b      	ldr	r3, [r3, #4]
 8002010:	091b      	lsrs	r3, r3, #4
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	4a0a      	ldr	r2, [pc, #40]	; (8002040 <HAL_RCC_ClockConfig+0x1c8>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	fa21 f303 	lsr.w	r3, r1, r3
 800201e:	4a09      	ldr	r2, [pc, #36]	; (8002044 <HAL_RCC_ClockConfig+0x1cc>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002022:	4b09      	ldr	r3, [pc, #36]	; (8002048 <HAL_RCC_ClockConfig+0x1d0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fbf6 	bl	8000818 <HAL_InitTick>

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40022000 	.word	0x40022000
 800203c:	40021000 	.word	0x40021000
 8002040:	08002ff4 	.word	0x08002ff4
 8002044:	20000000 	.word	0x20000000
 8002048:	20000004 	.word	0x20000004

0800204c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800204c:	b490      	push	{r4, r7}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002052:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002054:	1d3c      	adds	r4, r7, #4
 8002056:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002058:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800205c:	4b28      	ldr	r3, [pc, #160]	; (8002100 <HAL_RCC_GetSysClockFreq+0xb4>)
 800205e:	881b      	ldrh	r3, [r3, #0]
 8002060:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	2300      	movs	r3, #0
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002072:	2300      	movs	r3, #0
 8002074:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002076:	4b23      	ldr	r3, [pc, #140]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	f003 030c 	and.w	r3, r3, #12
 8002082:	2b04      	cmp	r3, #4
 8002084:	d002      	beq.n	800208c <HAL_RCC_GetSysClockFreq+0x40>
 8002086:	2b08      	cmp	r3, #8
 8002088:	d003      	beq.n	8002092 <HAL_RCC_GetSysClockFreq+0x46>
 800208a:	e02d      	b.n	80020e8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800208c:	4b1e      	ldr	r3, [pc, #120]	; (8002108 <HAL_RCC_GetSysClockFreq+0xbc>)
 800208e:	623b      	str	r3, [r7, #32]
      break;
 8002090:	e02d      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	0c9b      	lsrs	r3, r3, #18
 8002096:	f003 030f 	and.w	r3, r3, #15
 800209a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800209e:	4413      	add	r3, r2
 80020a0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80020a4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d013      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80020b0:	4b14      	ldr	r3, [pc, #80]	; (8002104 <HAL_RCC_GetSysClockFreq+0xb8>)
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	0c5b      	lsrs	r3, r3, #17
 80020b6:	f003 0301 	and.w	r3, r3, #1
 80020ba:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80020be:	4413      	add	r3, r2
 80020c0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80020c4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	4a0f      	ldr	r2, [pc, #60]	; (8002108 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ca:	fb02 f203 	mul.w	r2, r2, r3
 80020ce:	69bb      	ldr	r3, [r7, #24]
 80020d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
 80020d6:	e004      	b.n	80020e2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	4a0c      	ldr	r2, [pc, #48]	; (800210c <HAL_RCC_GetSysClockFreq+0xc0>)
 80020dc:	fb02 f303 	mul.w	r3, r2, r3
 80020e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80020e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e4:	623b      	str	r3, [r7, #32]
      break;
 80020e6:	e002      	b.n	80020ee <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020e8:	4b07      	ldr	r3, [pc, #28]	; (8002108 <HAL_RCC_GetSysClockFreq+0xbc>)
 80020ea:	623b      	str	r3, [r7, #32]
      break;
 80020ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020ee:	6a3b      	ldr	r3, [r7, #32]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3728      	adds	r7, #40	; 0x28
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bc90      	pop	{r4, r7}
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	08002fe0 	.word	0x08002fe0
 8002100:	08002ff0 	.word	0x08002ff0
 8002104:	40021000 	.word	0x40021000
 8002108:	007a1200 	.word	0x007a1200
 800210c:	003d0900 	.word	0x003d0900

08002110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002114:	4b02      	ldr	r3, [pc, #8]	; (8002120 <HAL_RCC_GetHCLKFreq+0x10>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	bc80      	pop	{r7}
 800211e:	4770      	bx	lr
 8002120:	20000000 	.word	0x20000000

08002124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002128:	f7ff fff2 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 800212c:	4601      	mov	r1, r0
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	0a1b      	lsrs	r3, r3, #8
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	4a03      	ldr	r2, [pc, #12]	; (8002148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800213a:	5cd3      	ldrb	r3, [r2, r3]
 800213c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002140:	4618      	mov	r0, r3
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40021000 	.word	0x40021000
 8002148:	08003004 	.word	0x08003004

0800214c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002150:	f7ff ffde 	bl	8002110 <HAL_RCC_GetHCLKFreq>
 8002154:	4601      	mov	r1, r0
 8002156:	4b05      	ldr	r3, [pc, #20]	; (800216c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	0adb      	lsrs	r3, r3, #11
 800215c:	f003 0307 	and.w	r3, r3, #7
 8002160:	4a03      	ldr	r2, [pc, #12]	; (8002170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002162:	5cd3      	ldrb	r3, [r2, r3]
 8002164:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002168:	4618      	mov	r0, r3
 800216a:	bd80      	pop	{r7, pc}
 800216c:	40021000 	.word	0x40021000
 8002170:	08003004 	.word	0x08003004

08002174 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <RCC_Delay+0x34>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <RCC_Delay+0x38>)
 8002182:	fba2 2303 	umull	r2, r3, r2, r3
 8002186:	0a5b      	lsrs	r3, r3, #9
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002190:	bf00      	nop
  }
  while (Delay --);
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	60fa      	str	r2, [r7, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1f9      	bne.n	8002190 <RCC_Delay+0x1c>
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bc80      	pop	{r7}
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000000 	.word	0x20000000
 80021ac:	10624dd3 	.word	0x10624dd3

080021b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b086      	sub	sp, #24
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80021b8:	2300      	movs	r3, #0
 80021ba:	613b      	str	r3, [r7, #16]
 80021bc:	2300      	movs	r3, #0
 80021be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0301 	and.w	r3, r3, #1
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d07d      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80021cc:	2300      	movs	r3, #0
 80021ce:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021d0:	4b4f      	ldr	r3, [pc, #316]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10d      	bne.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021dc:	4b4c      	ldr	r3, [pc, #304]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021de:	69db      	ldr	r3, [r3, #28]
 80021e0:	4a4b      	ldr	r2, [pc, #300]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e6:	61d3      	str	r3, [r2, #28]
 80021e8:	4b49      	ldr	r3, [pc, #292]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f0:	60bb      	str	r3, [r7, #8]
 80021f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021f4:	2301      	movs	r3, #1
 80021f6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f8:	4b46      	ldr	r3, [pc, #280]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002200:	2b00      	cmp	r3, #0
 8002202:	d118      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002204:	4b43      	ldr	r3, [pc, #268]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a42      	ldr	r2, [pc, #264]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800220a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800220e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002210:	f7fe fb44 	bl	800089c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002216:	e008      	b.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002218:	f7fe fb40 	bl	800089c <HAL_GetTick>
 800221c:	4602      	mov	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b64      	cmp	r3, #100	; 0x64
 8002224:	d901      	bls.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e06d      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800222a:	4b3a      	ldr	r3, [pc, #232]	; (8002314 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002232:	2b00      	cmp	r3, #0
 8002234:	d0f0      	beq.n	8002218 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002236:	4b36      	ldr	r3, [pc, #216]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002238:	6a1b      	ldr	r3, [r3, #32]
 800223a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800223e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d02e      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	429a      	cmp	r2, r3
 8002252:	d027      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002254:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	6a1b      	ldr	r3, [r3, #32]
 8002258:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800225c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800225e:	4b2e      	ldr	r3, [pc, #184]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002264:	4b2c      	ldr	r3, [pc, #176]	; (8002318 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002266:	2200      	movs	r2, #0
 8002268:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800226a:	4a29      	ldr	r2, [pc, #164]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	2b00      	cmp	r3, #0
 8002278:	d014      	beq.n	80022a4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800227a:	f7fe fb0f 	bl	800089c <HAL_GetTick>
 800227e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002280:	e00a      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002282:	f7fe fb0b 	bl	800089c <HAL_GetTick>
 8002286:	4602      	mov	r2, r0
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002290:	4293      	cmp	r3, r2
 8002292:	d901      	bls.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	e036      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002298:	4b1d      	ldr	r3, [pc, #116]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d0ee      	beq.n	8002282 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022a4:	4b1a      	ldr	r3, [pc, #104]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	4917      	ldr	r1, [pc, #92]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022b6:	7dfb      	ldrb	r3, [r7, #23]
 80022b8:	2b01      	cmp	r3, #1
 80022ba:	d105      	bne.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022bc:	4b14      	ldr	r3, [pc, #80]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022be:	69db      	ldr	r3, [r3, #28]
 80022c0:	4a13      	ldr	r2, [pc, #76]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022c6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d008      	beq.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022d4:	4b0e      	ldr	r3, [pc, #56]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	490b      	ldr	r1, [pc, #44]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0310 	and.w	r3, r3, #16
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	4904      	ldr	r1, [pc, #16]	; (8002310 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002300:	4313      	orrs	r3, r2
 8002302:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000
 8002314:	40007000 	.word	0x40007000
 8002318:	42420440 	.word	0x42420440

0800231c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e03f      	b.n	80023ae <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b00      	cmp	r3, #0
 8002338:	d106      	bne.n	8002348 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002342:	6878      	ldr	r0, [r7, #4]
 8002344:	f7fe f94c 	bl	80005e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2224      	movs	r2, #36	; 0x24
 800234c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	68da      	ldr	r2, [r3, #12]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800235e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002360:	6878      	ldr	r0, [r7, #4]
 8002362:	f000 f90b 	bl	800257c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002374:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	695a      	ldr	r2, [r3, #20]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002384:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002394:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2220      	movs	r2, #32
 80023a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2220      	movs	r2, #32
 80023a8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3708      	adds	r7, #8
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}

080023b6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023b6:	b580      	push	{r7, lr}
 80023b8:	b088      	sub	sp, #32
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	60b9      	str	r1, [r7, #8]
 80023c0:	603b      	str	r3, [r7, #0]
 80023c2:	4613      	mov	r3, r2
 80023c4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80023c6:	2300      	movs	r3, #0
 80023c8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	f040 8083 	bne.w	80024de <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d002      	beq.n	80023e4 <HAL_UART_Transmit+0x2e>
 80023de:	88fb      	ldrh	r3, [r7, #6]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d101      	bne.n	80023e8 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80023e4:	2301      	movs	r3, #1
 80023e6:	e07b      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d101      	bne.n	80023f6 <HAL_UART_Transmit+0x40>
 80023f2:	2302      	movs	r3, #2
 80023f4:	e074      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	2201      	movs	r2, #1
 80023fa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2200      	movs	r2, #0
 8002402:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2221      	movs	r2, #33	; 0x21
 8002408:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800240c:	f7fe fa46 	bl	800089c <HAL_GetTick>
 8002410:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	88fa      	ldrh	r2, [r7, #6]
 8002416:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	88fa      	ldrh	r2, [r7, #6]
 800241c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800241e:	e042      	b.n	80024a6 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002424:	b29b      	uxth	r3, r3
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002436:	d122      	bne.n	800247e <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	2200      	movs	r2, #0
 8002440:	2180      	movs	r1, #128	; 0x80
 8002442:	68f8      	ldr	r0, [r7, #12]
 8002444:	f000 f850 	bl	80024e8 <UART_WaitOnFlagUntilTimeout>
 8002448:	4603      	mov	r3, r0
 800244a:	2b00      	cmp	r3, #0
 800244c:	d001      	beq.n	8002452 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e046      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002464:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	691b      	ldr	r3, [r3, #16]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d103      	bne.n	8002476 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	3302      	adds	r3, #2
 8002472:	60bb      	str	r3, [r7, #8]
 8002474:	e017      	b.n	80024a6 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	3301      	adds	r3, #1
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	e013      	b.n	80024a6 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2200      	movs	r2, #0
 8002486:	2180      	movs	r1, #128	; 0x80
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 f82d 	bl	80024e8 <UART_WaitOnFlagUntilTimeout>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e023      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	1c5a      	adds	r2, r3, #1
 800249c:	60ba      	str	r2, [r7, #8]
 800249e:	781a      	ldrb	r2, [r3, #0]
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d1b7      	bne.n	8002420 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	697b      	ldr	r3, [r7, #20]
 80024b6:	2200      	movs	r2, #0
 80024b8:	2140      	movs	r1, #64	; 0x40
 80024ba:	68f8      	ldr	r0, [r7, #12]
 80024bc:	f000 f814 	bl	80024e8 <UART_WaitOnFlagUntilTimeout>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e00a      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2220      	movs	r2, #32
 80024ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80024da:	2300      	movs	r3, #0
 80024dc:	e000      	b.n	80024e0 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80024de:	2302      	movs	r3, #2
  }
}
 80024e0:	4618      	mov	r0, r3
 80024e2:	3718      	adds	r7, #24
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}

080024e8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	60f8      	str	r0, [r7, #12]
 80024f0:	60b9      	str	r1, [r7, #8]
 80024f2:	603b      	str	r3, [r7, #0]
 80024f4:	4613      	mov	r3, r2
 80024f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80024f8:	e02c      	b.n	8002554 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fa:	69bb      	ldr	r3, [r7, #24]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d028      	beq.n	8002554 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d007      	beq.n	8002518 <UART_WaitOnFlagUntilTimeout+0x30>
 8002508:	f7fe f9c8 	bl	800089c <HAL_GetTick>
 800250c:	4602      	mov	r2, r0
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	429a      	cmp	r2, r3
 8002516:	d21d      	bcs.n	8002554 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	68da      	ldr	r2, [r3, #12]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002526:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	695a      	ldr	r2, [r3, #20]
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0201 	bic.w	r2, r2, #1
 8002536:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2220      	movs	r2, #32
 800253c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2220      	movs	r2, #32
 8002544:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002550:	2303      	movs	r3, #3
 8002552:	e00f      	b.n	8002574 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4013      	ands	r3, r2
 800255e:	68ba      	ldr	r2, [r7, #8]
 8002560:	429a      	cmp	r2, r3
 8002562:	bf0c      	ite	eq
 8002564:	2301      	moveq	r3, #1
 8002566:	2300      	movne	r3, #0
 8002568:	b2db      	uxtb	r3, r3
 800256a:	461a      	mov	r2, r3
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	429a      	cmp	r2, r3
 8002570:	d0c3      	beq.n	80024fa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3710      	adds	r7, #16
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}

0800257c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	691b      	ldr	r3, [r3, #16]
 800258a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	68da      	ldr	r2, [r3, #12]
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	430a      	orrs	r2, r1
 8002598:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	695b      	ldr	r3, [r3, #20]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80025b6:	f023 030c 	bic.w	r3, r3, #12
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	430b      	orrs	r3, r1
 80025c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	695b      	ldr	r3, [r3, #20]
 80025ca:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	430a      	orrs	r2, r1
 80025d8:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a52      	ldr	r2, [pc, #328]	; (8002728 <UART_SetConfig+0x1ac>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d14e      	bne.n	8002682 <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80025e4:	f7ff fdb2 	bl	800214c <HAL_RCC_GetPCLK2Freq>
 80025e8:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	4613      	mov	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	4413      	add	r3, r2
 80025f2:	009a      	lsls	r2, r3, #2
 80025f4:	441a      	add	r2, r3
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	009b      	lsls	r3, r3, #2
 80025fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002600:	4a4a      	ldr	r2, [pc, #296]	; (800272c <UART_SetConfig+0x1b0>)
 8002602:	fba2 2303 	umull	r2, r3, r2, r3
 8002606:	095b      	lsrs	r3, r3, #5
 8002608:	0119      	lsls	r1, r3, #4
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	4613      	mov	r3, r2
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	4413      	add	r3, r2
 8002612:	009a      	lsls	r2, r3, #2
 8002614:	441a      	add	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002620:	4b42      	ldr	r3, [pc, #264]	; (800272c <UART_SetConfig+0x1b0>)
 8002622:	fba3 0302 	umull	r0, r3, r3, r2
 8002626:	095b      	lsrs	r3, r3, #5
 8002628:	2064      	movs	r0, #100	; 0x64
 800262a:	fb00 f303 	mul.w	r3, r0, r3
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	3332      	adds	r3, #50	; 0x32
 8002634:	4a3d      	ldr	r2, [pc, #244]	; (800272c <UART_SetConfig+0x1b0>)
 8002636:	fba2 2303 	umull	r2, r3, r2, r3
 800263a:	095b      	lsrs	r3, r3, #5
 800263c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002640:	4419      	add	r1, r3
 8002642:	68ba      	ldr	r2, [r7, #8]
 8002644:	4613      	mov	r3, r2
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4413      	add	r3, r2
 800264a:	009a      	lsls	r2, r3, #2
 800264c:	441a      	add	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	fbb2 f2f3 	udiv	r2, r2, r3
 8002658:	4b34      	ldr	r3, [pc, #208]	; (800272c <UART_SetConfig+0x1b0>)
 800265a:	fba3 0302 	umull	r0, r3, r3, r2
 800265e:	095b      	lsrs	r3, r3, #5
 8002660:	2064      	movs	r0, #100	; 0x64
 8002662:	fb00 f303 	mul.w	r3, r0, r3
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	011b      	lsls	r3, r3, #4
 800266a:	3332      	adds	r3, #50	; 0x32
 800266c:	4a2f      	ldr	r2, [pc, #188]	; (800272c <UART_SetConfig+0x1b0>)
 800266e:	fba2 2303 	umull	r2, r3, r2, r3
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	f003 020f 	and.w	r2, r3, #15
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	440a      	add	r2, r1
 800267e:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002680:	e04d      	b.n	800271e <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002682:	f7ff fd4f 	bl	8002124 <HAL_RCC_GetPCLK1Freq>
 8002686:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002688:	68ba      	ldr	r2, [r7, #8]
 800268a:	4613      	mov	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	4413      	add	r3, r2
 8002690:	009a      	lsls	r2, r3, #2
 8002692:	441a      	add	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	009b      	lsls	r3, r3, #2
 800269a:	fbb2 f3f3 	udiv	r3, r2, r3
 800269e:	4a23      	ldr	r2, [pc, #140]	; (800272c <UART_SetConfig+0x1b0>)
 80026a0:	fba2 2303 	umull	r2, r3, r2, r3
 80026a4:	095b      	lsrs	r3, r3, #5
 80026a6:	0119      	lsls	r1, r3, #4
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	009a      	lsls	r2, r3, #2
 80026b2:	441a      	add	r2, r3
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80026be:	4b1b      	ldr	r3, [pc, #108]	; (800272c <UART_SetConfig+0x1b0>)
 80026c0:	fba3 0302 	umull	r0, r3, r3, r2
 80026c4:	095b      	lsrs	r3, r3, #5
 80026c6:	2064      	movs	r0, #100	; 0x64
 80026c8:	fb00 f303 	mul.w	r3, r0, r3
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	011b      	lsls	r3, r3, #4
 80026d0:	3332      	adds	r3, #50	; 0x32
 80026d2:	4a16      	ldr	r2, [pc, #88]	; (800272c <UART_SetConfig+0x1b0>)
 80026d4:	fba2 2303 	umull	r2, r3, r2, r3
 80026d8:	095b      	lsrs	r3, r3, #5
 80026da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026de:	4419      	add	r1, r3
 80026e0:	68ba      	ldr	r2, [r7, #8]
 80026e2:	4613      	mov	r3, r2
 80026e4:	009b      	lsls	r3, r3, #2
 80026e6:	4413      	add	r3, r2
 80026e8:	009a      	lsls	r2, r3, #2
 80026ea:	441a      	add	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80026f6:	4b0d      	ldr	r3, [pc, #52]	; (800272c <UART_SetConfig+0x1b0>)
 80026f8:	fba3 0302 	umull	r0, r3, r3, r2
 80026fc:	095b      	lsrs	r3, r3, #5
 80026fe:	2064      	movs	r0, #100	; 0x64
 8002700:	fb00 f303 	mul.w	r3, r0, r3
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	3332      	adds	r3, #50	; 0x32
 800270a:	4a08      	ldr	r2, [pc, #32]	; (800272c <UART_SetConfig+0x1b0>)
 800270c:	fba2 2303 	umull	r2, r3, r2, r3
 8002710:	095b      	lsrs	r3, r3, #5
 8002712:	f003 020f 	and.w	r2, r3, #15
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	440a      	add	r2, r1
 800271c:	609a      	str	r2, [r3, #8]
}
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	40013800 	.word	0x40013800
 800272c:	51eb851f 	.word	0x51eb851f

08002730 <__errno>:
 8002730:	4b01      	ldr	r3, [pc, #4]	; (8002738 <__errno+0x8>)
 8002732:	6818      	ldr	r0, [r3, #0]
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	2000000c 	.word	0x2000000c

0800273c <__libc_init_array>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	2500      	movs	r5, #0
 8002740:	4e0c      	ldr	r6, [pc, #48]	; (8002774 <__libc_init_array+0x38>)
 8002742:	4c0d      	ldr	r4, [pc, #52]	; (8002778 <__libc_init_array+0x3c>)
 8002744:	1ba4      	subs	r4, r4, r6
 8002746:	10a4      	asrs	r4, r4, #2
 8002748:	42a5      	cmp	r5, r4
 800274a:	d109      	bne.n	8002760 <__libc_init_array+0x24>
 800274c:	f000 fc34 	bl	8002fb8 <_init>
 8002750:	2500      	movs	r5, #0
 8002752:	4e0a      	ldr	r6, [pc, #40]	; (800277c <__libc_init_array+0x40>)
 8002754:	4c0a      	ldr	r4, [pc, #40]	; (8002780 <__libc_init_array+0x44>)
 8002756:	1ba4      	subs	r4, r4, r6
 8002758:	10a4      	asrs	r4, r4, #2
 800275a:	42a5      	cmp	r5, r4
 800275c:	d105      	bne.n	800276a <__libc_init_array+0x2e>
 800275e:	bd70      	pop	{r4, r5, r6, pc}
 8002760:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002764:	4798      	blx	r3
 8002766:	3501      	adds	r5, #1
 8002768:	e7ee      	b.n	8002748 <__libc_init_array+0xc>
 800276a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800276e:	4798      	blx	r3
 8002770:	3501      	adds	r5, #1
 8002772:	e7f2      	b.n	800275a <__libc_init_array+0x1e>
 8002774:	080030a0 	.word	0x080030a0
 8002778:	080030a0 	.word	0x080030a0
 800277c:	080030a0 	.word	0x080030a0
 8002780:	080030a4 	.word	0x080030a4

08002784 <memset>:
 8002784:	4603      	mov	r3, r0
 8002786:	4402      	add	r2, r0
 8002788:	4293      	cmp	r3, r2
 800278a:	d100      	bne.n	800278e <memset+0xa>
 800278c:	4770      	bx	lr
 800278e:	f803 1b01 	strb.w	r1, [r3], #1
 8002792:	e7f9      	b.n	8002788 <memset+0x4>

08002794 <siprintf>:
 8002794:	b40e      	push	{r1, r2, r3}
 8002796:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800279a:	b500      	push	{lr}
 800279c:	b09c      	sub	sp, #112	; 0x70
 800279e:	ab1d      	add	r3, sp, #116	; 0x74
 80027a0:	9002      	str	r0, [sp, #8]
 80027a2:	9006      	str	r0, [sp, #24]
 80027a4:	9107      	str	r1, [sp, #28]
 80027a6:	9104      	str	r1, [sp, #16]
 80027a8:	4808      	ldr	r0, [pc, #32]	; (80027cc <siprintf+0x38>)
 80027aa:	4909      	ldr	r1, [pc, #36]	; (80027d0 <siprintf+0x3c>)
 80027ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80027b0:	9105      	str	r1, [sp, #20]
 80027b2:	6800      	ldr	r0, [r0, #0]
 80027b4:	a902      	add	r1, sp, #8
 80027b6:	9301      	str	r3, [sp, #4]
 80027b8:	f000 f866 	bl	8002888 <_svfiprintf_r>
 80027bc:	2200      	movs	r2, #0
 80027be:	9b02      	ldr	r3, [sp, #8]
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	b01c      	add	sp, #112	; 0x70
 80027c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80027c8:	b003      	add	sp, #12
 80027ca:	4770      	bx	lr
 80027cc:	2000000c 	.word	0x2000000c
 80027d0:	ffff0208 	.word	0xffff0208

080027d4 <__ssputs_r>:
 80027d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027d8:	688e      	ldr	r6, [r1, #8]
 80027da:	4682      	mov	sl, r0
 80027dc:	429e      	cmp	r6, r3
 80027de:	460c      	mov	r4, r1
 80027e0:	4690      	mov	r8, r2
 80027e2:	4699      	mov	r9, r3
 80027e4:	d837      	bhi.n	8002856 <__ssputs_r+0x82>
 80027e6:	898a      	ldrh	r2, [r1, #12]
 80027e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80027ec:	d031      	beq.n	8002852 <__ssputs_r+0x7e>
 80027ee:	2302      	movs	r3, #2
 80027f0:	6825      	ldr	r5, [r4, #0]
 80027f2:	6909      	ldr	r1, [r1, #16]
 80027f4:	1a6f      	subs	r7, r5, r1
 80027f6:	6965      	ldr	r5, [r4, #20]
 80027f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80027fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8002800:	f109 0301 	add.w	r3, r9, #1
 8002804:	443b      	add	r3, r7
 8002806:	429d      	cmp	r5, r3
 8002808:	bf38      	it	cc
 800280a:	461d      	movcc	r5, r3
 800280c:	0553      	lsls	r3, r2, #21
 800280e:	d530      	bpl.n	8002872 <__ssputs_r+0x9e>
 8002810:	4629      	mov	r1, r5
 8002812:	f000 fb37 	bl	8002e84 <_malloc_r>
 8002816:	4606      	mov	r6, r0
 8002818:	b950      	cbnz	r0, 8002830 <__ssputs_r+0x5c>
 800281a:	230c      	movs	r3, #12
 800281c:	f04f 30ff 	mov.w	r0, #4294967295
 8002820:	f8ca 3000 	str.w	r3, [sl]
 8002824:	89a3      	ldrh	r3, [r4, #12]
 8002826:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800282a:	81a3      	strh	r3, [r4, #12]
 800282c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002830:	463a      	mov	r2, r7
 8002832:	6921      	ldr	r1, [r4, #16]
 8002834:	f000 fab6 	bl	8002da4 <memcpy>
 8002838:	89a3      	ldrh	r3, [r4, #12]
 800283a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800283e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002842:	81a3      	strh	r3, [r4, #12]
 8002844:	6126      	str	r6, [r4, #16]
 8002846:	443e      	add	r6, r7
 8002848:	6026      	str	r6, [r4, #0]
 800284a:	464e      	mov	r6, r9
 800284c:	6165      	str	r5, [r4, #20]
 800284e:	1bed      	subs	r5, r5, r7
 8002850:	60a5      	str	r5, [r4, #8]
 8002852:	454e      	cmp	r6, r9
 8002854:	d900      	bls.n	8002858 <__ssputs_r+0x84>
 8002856:	464e      	mov	r6, r9
 8002858:	4632      	mov	r2, r6
 800285a:	4641      	mov	r1, r8
 800285c:	6820      	ldr	r0, [r4, #0]
 800285e:	f000 faac 	bl	8002dba <memmove>
 8002862:	68a3      	ldr	r3, [r4, #8]
 8002864:	2000      	movs	r0, #0
 8002866:	1b9b      	subs	r3, r3, r6
 8002868:	60a3      	str	r3, [r4, #8]
 800286a:	6823      	ldr	r3, [r4, #0]
 800286c:	441e      	add	r6, r3
 800286e:	6026      	str	r6, [r4, #0]
 8002870:	e7dc      	b.n	800282c <__ssputs_r+0x58>
 8002872:	462a      	mov	r2, r5
 8002874:	f000 fb60 	bl	8002f38 <_realloc_r>
 8002878:	4606      	mov	r6, r0
 800287a:	2800      	cmp	r0, #0
 800287c:	d1e2      	bne.n	8002844 <__ssputs_r+0x70>
 800287e:	6921      	ldr	r1, [r4, #16]
 8002880:	4650      	mov	r0, sl
 8002882:	f000 fab3 	bl	8002dec <_free_r>
 8002886:	e7c8      	b.n	800281a <__ssputs_r+0x46>

08002888 <_svfiprintf_r>:
 8002888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800288c:	461d      	mov	r5, r3
 800288e:	898b      	ldrh	r3, [r1, #12]
 8002890:	b09d      	sub	sp, #116	; 0x74
 8002892:	061f      	lsls	r7, r3, #24
 8002894:	4680      	mov	r8, r0
 8002896:	460c      	mov	r4, r1
 8002898:	4616      	mov	r6, r2
 800289a:	d50f      	bpl.n	80028bc <_svfiprintf_r+0x34>
 800289c:	690b      	ldr	r3, [r1, #16]
 800289e:	b96b      	cbnz	r3, 80028bc <_svfiprintf_r+0x34>
 80028a0:	2140      	movs	r1, #64	; 0x40
 80028a2:	f000 faef 	bl	8002e84 <_malloc_r>
 80028a6:	6020      	str	r0, [r4, #0]
 80028a8:	6120      	str	r0, [r4, #16]
 80028aa:	b928      	cbnz	r0, 80028b8 <_svfiprintf_r+0x30>
 80028ac:	230c      	movs	r3, #12
 80028ae:	f8c8 3000 	str.w	r3, [r8]
 80028b2:	f04f 30ff 	mov.w	r0, #4294967295
 80028b6:	e0c8      	b.n	8002a4a <_svfiprintf_r+0x1c2>
 80028b8:	2340      	movs	r3, #64	; 0x40
 80028ba:	6163      	str	r3, [r4, #20]
 80028bc:	2300      	movs	r3, #0
 80028be:	9309      	str	r3, [sp, #36]	; 0x24
 80028c0:	2320      	movs	r3, #32
 80028c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80028c6:	2330      	movs	r3, #48	; 0x30
 80028c8:	f04f 0b01 	mov.w	fp, #1
 80028cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80028d0:	9503      	str	r5, [sp, #12]
 80028d2:	4637      	mov	r7, r6
 80028d4:	463d      	mov	r5, r7
 80028d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80028da:	b10b      	cbz	r3, 80028e0 <_svfiprintf_r+0x58>
 80028dc:	2b25      	cmp	r3, #37	; 0x25
 80028de:	d13e      	bne.n	800295e <_svfiprintf_r+0xd6>
 80028e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80028e4:	d00b      	beq.n	80028fe <_svfiprintf_r+0x76>
 80028e6:	4653      	mov	r3, sl
 80028e8:	4632      	mov	r2, r6
 80028ea:	4621      	mov	r1, r4
 80028ec:	4640      	mov	r0, r8
 80028ee:	f7ff ff71 	bl	80027d4 <__ssputs_r>
 80028f2:	3001      	adds	r0, #1
 80028f4:	f000 80a4 	beq.w	8002a40 <_svfiprintf_r+0x1b8>
 80028f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80028fa:	4453      	add	r3, sl
 80028fc:	9309      	str	r3, [sp, #36]	; 0x24
 80028fe:	783b      	ldrb	r3, [r7, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	f000 809d 	beq.w	8002a40 <_svfiprintf_r+0x1b8>
 8002906:	2300      	movs	r3, #0
 8002908:	f04f 32ff 	mov.w	r2, #4294967295
 800290c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002910:	9304      	str	r3, [sp, #16]
 8002912:	9307      	str	r3, [sp, #28]
 8002914:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002918:	931a      	str	r3, [sp, #104]	; 0x68
 800291a:	462f      	mov	r7, r5
 800291c:	2205      	movs	r2, #5
 800291e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8002922:	4850      	ldr	r0, [pc, #320]	; (8002a64 <_svfiprintf_r+0x1dc>)
 8002924:	f000 fa30 	bl	8002d88 <memchr>
 8002928:	9b04      	ldr	r3, [sp, #16]
 800292a:	b9d0      	cbnz	r0, 8002962 <_svfiprintf_r+0xda>
 800292c:	06d9      	lsls	r1, r3, #27
 800292e:	bf44      	itt	mi
 8002930:	2220      	movmi	r2, #32
 8002932:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002936:	071a      	lsls	r2, r3, #28
 8002938:	bf44      	itt	mi
 800293a:	222b      	movmi	r2, #43	; 0x2b
 800293c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002940:	782a      	ldrb	r2, [r5, #0]
 8002942:	2a2a      	cmp	r2, #42	; 0x2a
 8002944:	d015      	beq.n	8002972 <_svfiprintf_r+0xea>
 8002946:	462f      	mov	r7, r5
 8002948:	2000      	movs	r0, #0
 800294a:	250a      	movs	r5, #10
 800294c:	9a07      	ldr	r2, [sp, #28]
 800294e:	4639      	mov	r1, r7
 8002950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002954:	3b30      	subs	r3, #48	; 0x30
 8002956:	2b09      	cmp	r3, #9
 8002958:	d94d      	bls.n	80029f6 <_svfiprintf_r+0x16e>
 800295a:	b1b8      	cbz	r0, 800298c <_svfiprintf_r+0x104>
 800295c:	e00f      	b.n	800297e <_svfiprintf_r+0xf6>
 800295e:	462f      	mov	r7, r5
 8002960:	e7b8      	b.n	80028d4 <_svfiprintf_r+0x4c>
 8002962:	4a40      	ldr	r2, [pc, #256]	; (8002a64 <_svfiprintf_r+0x1dc>)
 8002964:	463d      	mov	r5, r7
 8002966:	1a80      	subs	r0, r0, r2
 8002968:	fa0b f000 	lsl.w	r0, fp, r0
 800296c:	4318      	orrs	r0, r3
 800296e:	9004      	str	r0, [sp, #16]
 8002970:	e7d3      	b.n	800291a <_svfiprintf_r+0x92>
 8002972:	9a03      	ldr	r2, [sp, #12]
 8002974:	1d11      	adds	r1, r2, #4
 8002976:	6812      	ldr	r2, [r2, #0]
 8002978:	9103      	str	r1, [sp, #12]
 800297a:	2a00      	cmp	r2, #0
 800297c:	db01      	blt.n	8002982 <_svfiprintf_r+0xfa>
 800297e:	9207      	str	r2, [sp, #28]
 8002980:	e004      	b.n	800298c <_svfiprintf_r+0x104>
 8002982:	4252      	negs	r2, r2
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	9207      	str	r2, [sp, #28]
 800298a:	9304      	str	r3, [sp, #16]
 800298c:	783b      	ldrb	r3, [r7, #0]
 800298e:	2b2e      	cmp	r3, #46	; 0x2e
 8002990:	d10c      	bne.n	80029ac <_svfiprintf_r+0x124>
 8002992:	787b      	ldrb	r3, [r7, #1]
 8002994:	2b2a      	cmp	r3, #42	; 0x2a
 8002996:	d133      	bne.n	8002a00 <_svfiprintf_r+0x178>
 8002998:	9b03      	ldr	r3, [sp, #12]
 800299a:	3702      	adds	r7, #2
 800299c:	1d1a      	adds	r2, r3, #4
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	9203      	str	r2, [sp, #12]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	bfb8      	it	lt
 80029a6:	f04f 33ff 	movlt.w	r3, #4294967295
 80029aa:	9305      	str	r3, [sp, #20]
 80029ac:	4d2e      	ldr	r5, [pc, #184]	; (8002a68 <_svfiprintf_r+0x1e0>)
 80029ae:	2203      	movs	r2, #3
 80029b0:	7839      	ldrb	r1, [r7, #0]
 80029b2:	4628      	mov	r0, r5
 80029b4:	f000 f9e8 	bl	8002d88 <memchr>
 80029b8:	b138      	cbz	r0, 80029ca <_svfiprintf_r+0x142>
 80029ba:	2340      	movs	r3, #64	; 0x40
 80029bc:	1b40      	subs	r0, r0, r5
 80029be:	fa03 f000 	lsl.w	r0, r3, r0
 80029c2:	9b04      	ldr	r3, [sp, #16]
 80029c4:	3701      	adds	r7, #1
 80029c6:	4303      	orrs	r3, r0
 80029c8:	9304      	str	r3, [sp, #16]
 80029ca:	7839      	ldrb	r1, [r7, #0]
 80029cc:	2206      	movs	r2, #6
 80029ce:	4827      	ldr	r0, [pc, #156]	; (8002a6c <_svfiprintf_r+0x1e4>)
 80029d0:	1c7e      	adds	r6, r7, #1
 80029d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80029d6:	f000 f9d7 	bl	8002d88 <memchr>
 80029da:	2800      	cmp	r0, #0
 80029dc:	d038      	beq.n	8002a50 <_svfiprintf_r+0x1c8>
 80029de:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <_svfiprintf_r+0x1e8>)
 80029e0:	bb13      	cbnz	r3, 8002a28 <_svfiprintf_r+0x1a0>
 80029e2:	9b03      	ldr	r3, [sp, #12]
 80029e4:	3307      	adds	r3, #7
 80029e6:	f023 0307 	bic.w	r3, r3, #7
 80029ea:	3308      	adds	r3, #8
 80029ec:	9303      	str	r3, [sp, #12]
 80029ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029f0:	444b      	add	r3, r9
 80029f2:	9309      	str	r3, [sp, #36]	; 0x24
 80029f4:	e76d      	b.n	80028d2 <_svfiprintf_r+0x4a>
 80029f6:	fb05 3202 	mla	r2, r5, r2, r3
 80029fa:	2001      	movs	r0, #1
 80029fc:	460f      	mov	r7, r1
 80029fe:	e7a6      	b.n	800294e <_svfiprintf_r+0xc6>
 8002a00:	2300      	movs	r3, #0
 8002a02:	250a      	movs	r5, #10
 8002a04:	4619      	mov	r1, r3
 8002a06:	3701      	adds	r7, #1
 8002a08:	9305      	str	r3, [sp, #20]
 8002a0a:	4638      	mov	r0, r7
 8002a0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002a10:	3a30      	subs	r2, #48	; 0x30
 8002a12:	2a09      	cmp	r2, #9
 8002a14:	d903      	bls.n	8002a1e <_svfiprintf_r+0x196>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d0c8      	beq.n	80029ac <_svfiprintf_r+0x124>
 8002a1a:	9105      	str	r1, [sp, #20]
 8002a1c:	e7c6      	b.n	80029ac <_svfiprintf_r+0x124>
 8002a1e:	fb05 2101 	mla	r1, r5, r1, r2
 8002a22:	2301      	movs	r3, #1
 8002a24:	4607      	mov	r7, r0
 8002a26:	e7f0      	b.n	8002a0a <_svfiprintf_r+0x182>
 8002a28:	ab03      	add	r3, sp, #12
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	4622      	mov	r2, r4
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <_svfiprintf_r+0x1ec>)
 8002a30:	a904      	add	r1, sp, #16
 8002a32:	4640      	mov	r0, r8
 8002a34:	f3af 8000 	nop.w
 8002a38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002a3c:	4681      	mov	r9, r0
 8002a3e:	d1d6      	bne.n	80029ee <_svfiprintf_r+0x166>
 8002a40:	89a3      	ldrh	r3, [r4, #12]
 8002a42:	065b      	lsls	r3, r3, #25
 8002a44:	f53f af35 	bmi.w	80028b2 <_svfiprintf_r+0x2a>
 8002a48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002a4a:	b01d      	add	sp, #116	; 0x74
 8002a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a50:	ab03      	add	r3, sp, #12
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	4622      	mov	r2, r4
 8002a56:	4b07      	ldr	r3, [pc, #28]	; (8002a74 <_svfiprintf_r+0x1ec>)
 8002a58:	a904      	add	r1, sp, #16
 8002a5a:	4640      	mov	r0, r8
 8002a5c:	f000 f882 	bl	8002b64 <_printf_i>
 8002a60:	e7ea      	b.n	8002a38 <_svfiprintf_r+0x1b0>
 8002a62:	bf00      	nop
 8002a64:	0800300c 	.word	0x0800300c
 8002a68:	08003012 	.word	0x08003012
 8002a6c:	08003016 	.word	0x08003016
 8002a70:	00000000 	.word	0x00000000
 8002a74:	080027d5 	.word	0x080027d5

08002a78 <_printf_common>:
 8002a78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a7c:	4691      	mov	r9, r2
 8002a7e:	461f      	mov	r7, r3
 8002a80:	688a      	ldr	r2, [r1, #8]
 8002a82:	690b      	ldr	r3, [r1, #16]
 8002a84:	4606      	mov	r6, r0
 8002a86:	4293      	cmp	r3, r2
 8002a88:	bfb8      	it	lt
 8002a8a:	4613      	movlt	r3, r2
 8002a8c:	f8c9 3000 	str.w	r3, [r9]
 8002a90:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002a94:	460c      	mov	r4, r1
 8002a96:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002a9a:	b112      	cbz	r2, 8002aa2 <_printf_common+0x2a>
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	f8c9 3000 	str.w	r3, [r9]
 8002aa2:	6823      	ldr	r3, [r4, #0]
 8002aa4:	0699      	lsls	r1, r3, #26
 8002aa6:	bf42      	ittt	mi
 8002aa8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002aac:	3302      	addmi	r3, #2
 8002aae:	f8c9 3000 	strmi.w	r3, [r9]
 8002ab2:	6825      	ldr	r5, [r4, #0]
 8002ab4:	f015 0506 	ands.w	r5, r5, #6
 8002ab8:	d107      	bne.n	8002aca <_printf_common+0x52>
 8002aba:	f104 0a19 	add.w	sl, r4, #25
 8002abe:	68e3      	ldr	r3, [r4, #12]
 8002ac0:	f8d9 2000 	ldr.w	r2, [r9]
 8002ac4:	1a9b      	subs	r3, r3, r2
 8002ac6:	42ab      	cmp	r3, r5
 8002ac8:	dc29      	bgt.n	8002b1e <_printf_common+0xa6>
 8002aca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ace:	6822      	ldr	r2, [r4, #0]
 8002ad0:	3300      	adds	r3, #0
 8002ad2:	bf18      	it	ne
 8002ad4:	2301      	movne	r3, #1
 8002ad6:	0692      	lsls	r2, r2, #26
 8002ad8:	d42e      	bmi.n	8002b38 <_printf_common+0xc0>
 8002ada:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ade:	4639      	mov	r1, r7
 8002ae0:	4630      	mov	r0, r6
 8002ae2:	47c0      	blx	r8
 8002ae4:	3001      	adds	r0, #1
 8002ae6:	d021      	beq.n	8002b2c <_printf_common+0xb4>
 8002ae8:	6823      	ldr	r3, [r4, #0]
 8002aea:	68e5      	ldr	r5, [r4, #12]
 8002aec:	f003 0306 	and.w	r3, r3, #6
 8002af0:	2b04      	cmp	r3, #4
 8002af2:	bf18      	it	ne
 8002af4:	2500      	movne	r5, #0
 8002af6:	f8d9 2000 	ldr.w	r2, [r9]
 8002afa:	f04f 0900 	mov.w	r9, #0
 8002afe:	bf08      	it	eq
 8002b00:	1aad      	subeq	r5, r5, r2
 8002b02:	68a3      	ldr	r3, [r4, #8]
 8002b04:	6922      	ldr	r2, [r4, #16]
 8002b06:	bf08      	it	eq
 8002b08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	bfc4      	itt	gt
 8002b10:	1a9b      	subgt	r3, r3, r2
 8002b12:	18ed      	addgt	r5, r5, r3
 8002b14:	341a      	adds	r4, #26
 8002b16:	454d      	cmp	r5, r9
 8002b18:	d11a      	bne.n	8002b50 <_printf_common+0xd8>
 8002b1a:	2000      	movs	r0, #0
 8002b1c:	e008      	b.n	8002b30 <_printf_common+0xb8>
 8002b1e:	2301      	movs	r3, #1
 8002b20:	4652      	mov	r2, sl
 8002b22:	4639      	mov	r1, r7
 8002b24:	4630      	mov	r0, r6
 8002b26:	47c0      	blx	r8
 8002b28:	3001      	adds	r0, #1
 8002b2a:	d103      	bne.n	8002b34 <_printf_common+0xbc>
 8002b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002b34:	3501      	adds	r5, #1
 8002b36:	e7c2      	b.n	8002abe <_printf_common+0x46>
 8002b38:	2030      	movs	r0, #48	; 0x30
 8002b3a:	18e1      	adds	r1, r4, r3
 8002b3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002b40:	1c5a      	adds	r2, r3, #1
 8002b42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002b46:	4422      	add	r2, r4
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002b4e:	e7c4      	b.n	8002ada <_printf_common+0x62>
 8002b50:	2301      	movs	r3, #1
 8002b52:	4622      	mov	r2, r4
 8002b54:	4639      	mov	r1, r7
 8002b56:	4630      	mov	r0, r6
 8002b58:	47c0      	blx	r8
 8002b5a:	3001      	adds	r0, #1
 8002b5c:	d0e6      	beq.n	8002b2c <_printf_common+0xb4>
 8002b5e:	f109 0901 	add.w	r9, r9, #1
 8002b62:	e7d8      	b.n	8002b16 <_printf_common+0x9e>

08002b64 <_printf_i>:
 8002b64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002b68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002b6c:	460c      	mov	r4, r1
 8002b6e:	7e09      	ldrb	r1, [r1, #24]
 8002b70:	b085      	sub	sp, #20
 8002b72:	296e      	cmp	r1, #110	; 0x6e
 8002b74:	4617      	mov	r7, r2
 8002b76:	4606      	mov	r6, r0
 8002b78:	4698      	mov	r8, r3
 8002b7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002b7c:	f000 80b3 	beq.w	8002ce6 <_printf_i+0x182>
 8002b80:	d822      	bhi.n	8002bc8 <_printf_i+0x64>
 8002b82:	2963      	cmp	r1, #99	; 0x63
 8002b84:	d036      	beq.n	8002bf4 <_printf_i+0x90>
 8002b86:	d80a      	bhi.n	8002b9e <_printf_i+0x3a>
 8002b88:	2900      	cmp	r1, #0
 8002b8a:	f000 80b9 	beq.w	8002d00 <_printf_i+0x19c>
 8002b8e:	2958      	cmp	r1, #88	; 0x58
 8002b90:	f000 8083 	beq.w	8002c9a <_printf_i+0x136>
 8002b94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002b98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002b9c:	e032      	b.n	8002c04 <_printf_i+0xa0>
 8002b9e:	2964      	cmp	r1, #100	; 0x64
 8002ba0:	d001      	beq.n	8002ba6 <_printf_i+0x42>
 8002ba2:	2969      	cmp	r1, #105	; 0x69
 8002ba4:	d1f6      	bne.n	8002b94 <_printf_i+0x30>
 8002ba6:	6820      	ldr	r0, [r4, #0]
 8002ba8:	6813      	ldr	r3, [r2, #0]
 8002baa:	0605      	lsls	r5, r0, #24
 8002bac:	f103 0104 	add.w	r1, r3, #4
 8002bb0:	d52a      	bpl.n	8002c08 <_printf_i+0xa4>
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	6011      	str	r1, [r2, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	da03      	bge.n	8002bc2 <_printf_i+0x5e>
 8002bba:	222d      	movs	r2, #45	; 0x2d
 8002bbc:	425b      	negs	r3, r3
 8002bbe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002bc2:	486f      	ldr	r0, [pc, #444]	; (8002d80 <_printf_i+0x21c>)
 8002bc4:	220a      	movs	r2, #10
 8002bc6:	e039      	b.n	8002c3c <_printf_i+0xd8>
 8002bc8:	2973      	cmp	r1, #115	; 0x73
 8002bca:	f000 809d 	beq.w	8002d08 <_printf_i+0x1a4>
 8002bce:	d808      	bhi.n	8002be2 <_printf_i+0x7e>
 8002bd0:	296f      	cmp	r1, #111	; 0x6f
 8002bd2:	d020      	beq.n	8002c16 <_printf_i+0xb2>
 8002bd4:	2970      	cmp	r1, #112	; 0x70
 8002bd6:	d1dd      	bne.n	8002b94 <_printf_i+0x30>
 8002bd8:	6823      	ldr	r3, [r4, #0]
 8002bda:	f043 0320 	orr.w	r3, r3, #32
 8002bde:	6023      	str	r3, [r4, #0]
 8002be0:	e003      	b.n	8002bea <_printf_i+0x86>
 8002be2:	2975      	cmp	r1, #117	; 0x75
 8002be4:	d017      	beq.n	8002c16 <_printf_i+0xb2>
 8002be6:	2978      	cmp	r1, #120	; 0x78
 8002be8:	d1d4      	bne.n	8002b94 <_printf_i+0x30>
 8002bea:	2378      	movs	r3, #120	; 0x78
 8002bec:	4865      	ldr	r0, [pc, #404]	; (8002d84 <_printf_i+0x220>)
 8002bee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002bf2:	e055      	b.n	8002ca0 <_printf_i+0x13c>
 8002bf4:	6813      	ldr	r3, [r2, #0]
 8002bf6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002bfa:	1d19      	adds	r1, r3, #4
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	6011      	str	r1, [r2, #0]
 8002c00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002c04:	2301      	movs	r3, #1
 8002c06:	e08c      	b.n	8002d22 <_printf_i+0x1be>
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002c0e:	6011      	str	r1, [r2, #0]
 8002c10:	bf18      	it	ne
 8002c12:	b21b      	sxthne	r3, r3
 8002c14:	e7cf      	b.n	8002bb6 <_printf_i+0x52>
 8002c16:	6813      	ldr	r3, [r2, #0]
 8002c18:	6825      	ldr	r5, [r4, #0]
 8002c1a:	1d18      	adds	r0, r3, #4
 8002c1c:	6010      	str	r0, [r2, #0]
 8002c1e:	0628      	lsls	r0, r5, #24
 8002c20:	d501      	bpl.n	8002c26 <_printf_i+0xc2>
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	e002      	b.n	8002c2c <_printf_i+0xc8>
 8002c26:	0668      	lsls	r0, r5, #25
 8002c28:	d5fb      	bpl.n	8002c22 <_printf_i+0xbe>
 8002c2a:	881b      	ldrh	r3, [r3, #0]
 8002c2c:	296f      	cmp	r1, #111	; 0x6f
 8002c2e:	bf14      	ite	ne
 8002c30:	220a      	movne	r2, #10
 8002c32:	2208      	moveq	r2, #8
 8002c34:	4852      	ldr	r0, [pc, #328]	; (8002d80 <_printf_i+0x21c>)
 8002c36:	2100      	movs	r1, #0
 8002c38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002c3c:	6865      	ldr	r5, [r4, #4]
 8002c3e:	2d00      	cmp	r5, #0
 8002c40:	60a5      	str	r5, [r4, #8]
 8002c42:	f2c0 8095 	blt.w	8002d70 <_printf_i+0x20c>
 8002c46:	6821      	ldr	r1, [r4, #0]
 8002c48:	f021 0104 	bic.w	r1, r1, #4
 8002c4c:	6021      	str	r1, [r4, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d13d      	bne.n	8002cce <_printf_i+0x16a>
 8002c52:	2d00      	cmp	r5, #0
 8002c54:	f040 808e 	bne.w	8002d74 <_printf_i+0x210>
 8002c58:	4665      	mov	r5, ip
 8002c5a:	2a08      	cmp	r2, #8
 8002c5c:	d10b      	bne.n	8002c76 <_printf_i+0x112>
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	07db      	lsls	r3, r3, #31
 8002c62:	d508      	bpl.n	8002c76 <_printf_i+0x112>
 8002c64:	6923      	ldr	r3, [r4, #16]
 8002c66:	6862      	ldr	r2, [r4, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	bfde      	ittt	le
 8002c6c:	2330      	movle	r3, #48	; 0x30
 8002c6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002c72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002c76:	ebac 0305 	sub.w	r3, ip, r5
 8002c7a:	6123      	str	r3, [r4, #16]
 8002c7c:	f8cd 8000 	str.w	r8, [sp]
 8002c80:	463b      	mov	r3, r7
 8002c82:	aa03      	add	r2, sp, #12
 8002c84:	4621      	mov	r1, r4
 8002c86:	4630      	mov	r0, r6
 8002c88:	f7ff fef6 	bl	8002a78 <_printf_common>
 8002c8c:	3001      	adds	r0, #1
 8002c8e:	d14d      	bne.n	8002d2c <_printf_i+0x1c8>
 8002c90:	f04f 30ff 	mov.w	r0, #4294967295
 8002c94:	b005      	add	sp, #20
 8002c96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002c9a:	4839      	ldr	r0, [pc, #228]	; (8002d80 <_printf_i+0x21c>)
 8002c9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002ca0:	6813      	ldr	r3, [r2, #0]
 8002ca2:	6821      	ldr	r1, [r4, #0]
 8002ca4:	1d1d      	adds	r5, r3, #4
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6015      	str	r5, [r2, #0]
 8002caa:	060a      	lsls	r2, r1, #24
 8002cac:	d50b      	bpl.n	8002cc6 <_printf_i+0x162>
 8002cae:	07ca      	lsls	r2, r1, #31
 8002cb0:	bf44      	itt	mi
 8002cb2:	f041 0120 	orrmi.w	r1, r1, #32
 8002cb6:	6021      	strmi	r1, [r4, #0]
 8002cb8:	b91b      	cbnz	r3, 8002cc2 <_printf_i+0x15e>
 8002cba:	6822      	ldr	r2, [r4, #0]
 8002cbc:	f022 0220 	bic.w	r2, r2, #32
 8002cc0:	6022      	str	r2, [r4, #0]
 8002cc2:	2210      	movs	r2, #16
 8002cc4:	e7b7      	b.n	8002c36 <_printf_i+0xd2>
 8002cc6:	064d      	lsls	r5, r1, #25
 8002cc8:	bf48      	it	mi
 8002cca:	b29b      	uxthmi	r3, r3
 8002ccc:	e7ef      	b.n	8002cae <_printf_i+0x14a>
 8002cce:	4665      	mov	r5, ip
 8002cd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8002cd4:	fb02 3311 	mls	r3, r2, r1, r3
 8002cd8:	5cc3      	ldrb	r3, [r0, r3]
 8002cda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002cde:	460b      	mov	r3, r1
 8002ce0:	2900      	cmp	r1, #0
 8002ce2:	d1f5      	bne.n	8002cd0 <_printf_i+0x16c>
 8002ce4:	e7b9      	b.n	8002c5a <_printf_i+0xf6>
 8002ce6:	6813      	ldr	r3, [r2, #0]
 8002ce8:	6825      	ldr	r5, [r4, #0]
 8002cea:	1d18      	adds	r0, r3, #4
 8002cec:	6961      	ldr	r1, [r4, #20]
 8002cee:	6010      	str	r0, [r2, #0]
 8002cf0:	0628      	lsls	r0, r5, #24
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	d501      	bpl.n	8002cfa <_printf_i+0x196>
 8002cf6:	6019      	str	r1, [r3, #0]
 8002cf8:	e002      	b.n	8002d00 <_printf_i+0x19c>
 8002cfa:	066a      	lsls	r2, r5, #25
 8002cfc:	d5fb      	bpl.n	8002cf6 <_printf_i+0x192>
 8002cfe:	8019      	strh	r1, [r3, #0]
 8002d00:	2300      	movs	r3, #0
 8002d02:	4665      	mov	r5, ip
 8002d04:	6123      	str	r3, [r4, #16]
 8002d06:	e7b9      	b.n	8002c7c <_printf_i+0x118>
 8002d08:	6813      	ldr	r3, [r2, #0]
 8002d0a:	1d19      	adds	r1, r3, #4
 8002d0c:	6011      	str	r1, [r2, #0]
 8002d0e:	681d      	ldr	r5, [r3, #0]
 8002d10:	6862      	ldr	r2, [r4, #4]
 8002d12:	2100      	movs	r1, #0
 8002d14:	4628      	mov	r0, r5
 8002d16:	f000 f837 	bl	8002d88 <memchr>
 8002d1a:	b108      	cbz	r0, 8002d20 <_printf_i+0x1bc>
 8002d1c:	1b40      	subs	r0, r0, r5
 8002d1e:	6060      	str	r0, [r4, #4]
 8002d20:	6863      	ldr	r3, [r4, #4]
 8002d22:	6123      	str	r3, [r4, #16]
 8002d24:	2300      	movs	r3, #0
 8002d26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002d2a:	e7a7      	b.n	8002c7c <_printf_i+0x118>
 8002d2c:	6923      	ldr	r3, [r4, #16]
 8002d2e:	462a      	mov	r2, r5
 8002d30:	4639      	mov	r1, r7
 8002d32:	4630      	mov	r0, r6
 8002d34:	47c0      	blx	r8
 8002d36:	3001      	adds	r0, #1
 8002d38:	d0aa      	beq.n	8002c90 <_printf_i+0x12c>
 8002d3a:	6823      	ldr	r3, [r4, #0]
 8002d3c:	079b      	lsls	r3, r3, #30
 8002d3e:	d413      	bmi.n	8002d68 <_printf_i+0x204>
 8002d40:	68e0      	ldr	r0, [r4, #12]
 8002d42:	9b03      	ldr	r3, [sp, #12]
 8002d44:	4298      	cmp	r0, r3
 8002d46:	bfb8      	it	lt
 8002d48:	4618      	movlt	r0, r3
 8002d4a:	e7a3      	b.n	8002c94 <_printf_i+0x130>
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	464a      	mov	r2, r9
 8002d50:	4639      	mov	r1, r7
 8002d52:	4630      	mov	r0, r6
 8002d54:	47c0      	blx	r8
 8002d56:	3001      	adds	r0, #1
 8002d58:	d09a      	beq.n	8002c90 <_printf_i+0x12c>
 8002d5a:	3501      	adds	r5, #1
 8002d5c:	68e3      	ldr	r3, [r4, #12]
 8002d5e:	9a03      	ldr	r2, [sp, #12]
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	42ab      	cmp	r3, r5
 8002d64:	dcf2      	bgt.n	8002d4c <_printf_i+0x1e8>
 8002d66:	e7eb      	b.n	8002d40 <_printf_i+0x1dc>
 8002d68:	2500      	movs	r5, #0
 8002d6a:	f104 0919 	add.w	r9, r4, #25
 8002d6e:	e7f5      	b.n	8002d5c <_printf_i+0x1f8>
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d1ac      	bne.n	8002cce <_printf_i+0x16a>
 8002d74:	7803      	ldrb	r3, [r0, #0]
 8002d76:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002d7a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002d7e:	e76c      	b.n	8002c5a <_printf_i+0xf6>
 8002d80:	0800301d 	.word	0x0800301d
 8002d84:	0800302e 	.word	0x0800302e

08002d88 <memchr>:
 8002d88:	b510      	push	{r4, lr}
 8002d8a:	b2c9      	uxtb	r1, r1
 8002d8c:	4402      	add	r2, r0
 8002d8e:	4290      	cmp	r0, r2
 8002d90:	4603      	mov	r3, r0
 8002d92:	d101      	bne.n	8002d98 <memchr+0x10>
 8002d94:	2300      	movs	r3, #0
 8002d96:	e003      	b.n	8002da0 <memchr+0x18>
 8002d98:	781c      	ldrb	r4, [r3, #0]
 8002d9a:	3001      	adds	r0, #1
 8002d9c:	428c      	cmp	r4, r1
 8002d9e:	d1f6      	bne.n	8002d8e <memchr+0x6>
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd10      	pop	{r4, pc}

08002da4 <memcpy>:
 8002da4:	b510      	push	{r4, lr}
 8002da6:	1e43      	subs	r3, r0, #1
 8002da8:	440a      	add	r2, r1
 8002daa:	4291      	cmp	r1, r2
 8002dac:	d100      	bne.n	8002db0 <memcpy+0xc>
 8002dae:	bd10      	pop	{r4, pc}
 8002db0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002db4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002db8:	e7f7      	b.n	8002daa <memcpy+0x6>

08002dba <memmove>:
 8002dba:	4288      	cmp	r0, r1
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	eb01 0302 	add.w	r3, r1, r2
 8002dc2:	d807      	bhi.n	8002dd4 <memmove+0x1a>
 8002dc4:	1e42      	subs	r2, r0, #1
 8002dc6:	4299      	cmp	r1, r3
 8002dc8:	d00a      	beq.n	8002de0 <memmove+0x26>
 8002dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dce:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002dd2:	e7f8      	b.n	8002dc6 <memmove+0xc>
 8002dd4:	4283      	cmp	r3, r0
 8002dd6:	d9f5      	bls.n	8002dc4 <memmove+0xa>
 8002dd8:	1881      	adds	r1, r0, r2
 8002dda:	1ad2      	subs	r2, r2, r3
 8002ddc:	42d3      	cmn	r3, r2
 8002dde:	d100      	bne.n	8002de2 <memmove+0x28>
 8002de0:	bd10      	pop	{r4, pc}
 8002de2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002de6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002dea:	e7f7      	b.n	8002ddc <memmove+0x22>

08002dec <_free_r>:
 8002dec:	b538      	push	{r3, r4, r5, lr}
 8002dee:	4605      	mov	r5, r0
 8002df0:	2900      	cmp	r1, #0
 8002df2:	d043      	beq.n	8002e7c <_free_r+0x90>
 8002df4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002df8:	1f0c      	subs	r4, r1, #4
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	bfb8      	it	lt
 8002dfe:	18e4      	addlt	r4, r4, r3
 8002e00:	f000 f8d0 	bl	8002fa4 <__malloc_lock>
 8002e04:	4a1e      	ldr	r2, [pc, #120]	; (8002e80 <_free_r+0x94>)
 8002e06:	6813      	ldr	r3, [r2, #0]
 8002e08:	4610      	mov	r0, r2
 8002e0a:	b933      	cbnz	r3, 8002e1a <_free_r+0x2e>
 8002e0c:	6063      	str	r3, [r4, #4]
 8002e0e:	6014      	str	r4, [r2, #0]
 8002e10:	4628      	mov	r0, r5
 8002e12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002e16:	f000 b8c6 	b.w	8002fa6 <__malloc_unlock>
 8002e1a:	42a3      	cmp	r3, r4
 8002e1c:	d90b      	bls.n	8002e36 <_free_r+0x4a>
 8002e1e:	6821      	ldr	r1, [r4, #0]
 8002e20:	1862      	adds	r2, r4, r1
 8002e22:	4293      	cmp	r3, r2
 8002e24:	bf01      	itttt	eq
 8002e26:	681a      	ldreq	r2, [r3, #0]
 8002e28:	685b      	ldreq	r3, [r3, #4]
 8002e2a:	1852      	addeq	r2, r2, r1
 8002e2c:	6022      	streq	r2, [r4, #0]
 8002e2e:	6063      	str	r3, [r4, #4]
 8002e30:	6004      	str	r4, [r0, #0]
 8002e32:	e7ed      	b.n	8002e10 <_free_r+0x24>
 8002e34:	4613      	mov	r3, r2
 8002e36:	685a      	ldr	r2, [r3, #4]
 8002e38:	b10a      	cbz	r2, 8002e3e <_free_r+0x52>
 8002e3a:	42a2      	cmp	r2, r4
 8002e3c:	d9fa      	bls.n	8002e34 <_free_r+0x48>
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	1858      	adds	r0, r3, r1
 8002e42:	42a0      	cmp	r0, r4
 8002e44:	d10b      	bne.n	8002e5e <_free_r+0x72>
 8002e46:	6820      	ldr	r0, [r4, #0]
 8002e48:	4401      	add	r1, r0
 8002e4a:	1858      	adds	r0, r3, r1
 8002e4c:	4282      	cmp	r2, r0
 8002e4e:	6019      	str	r1, [r3, #0]
 8002e50:	d1de      	bne.n	8002e10 <_free_r+0x24>
 8002e52:	6810      	ldr	r0, [r2, #0]
 8002e54:	6852      	ldr	r2, [r2, #4]
 8002e56:	4401      	add	r1, r0
 8002e58:	6019      	str	r1, [r3, #0]
 8002e5a:	605a      	str	r2, [r3, #4]
 8002e5c:	e7d8      	b.n	8002e10 <_free_r+0x24>
 8002e5e:	d902      	bls.n	8002e66 <_free_r+0x7a>
 8002e60:	230c      	movs	r3, #12
 8002e62:	602b      	str	r3, [r5, #0]
 8002e64:	e7d4      	b.n	8002e10 <_free_r+0x24>
 8002e66:	6820      	ldr	r0, [r4, #0]
 8002e68:	1821      	adds	r1, r4, r0
 8002e6a:	428a      	cmp	r2, r1
 8002e6c:	bf01      	itttt	eq
 8002e6e:	6811      	ldreq	r1, [r2, #0]
 8002e70:	6852      	ldreq	r2, [r2, #4]
 8002e72:	1809      	addeq	r1, r1, r0
 8002e74:	6021      	streq	r1, [r4, #0]
 8002e76:	6062      	str	r2, [r4, #4]
 8002e78:	605c      	str	r4, [r3, #4]
 8002e7a:	e7c9      	b.n	8002e10 <_free_r+0x24>
 8002e7c:	bd38      	pop	{r3, r4, r5, pc}
 8002e7e:	bf00      	nop
 8002e80:	20000090 	.word	0x20000090

08002e84 <_malloc_r>:
 8002e84:	b570      	push	{r4, r5, r6, lr}
 8002e86:	1ccd      	adds	r5, r1, #3
 8002e88:	f025 0503 	bic.w	r5, r5, #3
 8002e8c:	3508      	adds	r5, #8
 8002e8e:	2d0c      	cmp	r5, #12
 8002e90:	bf38      	it	cc
 8002e92:	250c      	movcc	r5, #12
 8002e94:	2d00      	cmp	r5, #0
 8002e96:	4606      	mov	r6, r0
 8002e98:	db01      	blt.n	8002e9e <_malloc_r+0x1a>
 8002e9a:	42a9      	cmp	r1, r5
 8002e9c:	d903      	bls.n	8002ea6 <_malloc_r+0x22>
 8002e9e:	230c      	movs	r3, #12
 8002ea0:	6033      	str	r3, [r6, #0]
 8002ea2:	2000      	movs	r0, #0
 8002ea4:	bd70      	pop	{r4, r5, r6, pc}
 8002ea6:	f000 f87d 	bl	8002fa4 <__malloc_lock>
 8002eaa:	4a21      	ldr	r2, [pc, #132]	; (8002f30 <_malloc_r+0xac>)
 8002eac:	6814      	ldr	r4, [r2, #0]
 8002eae:	4621      	mov	r1, r4
 8002eb0:	b991      	cbnz	r1, 8002ed8 <_malloc_r+0x54>
 8002eb2:	4c20      	ldr	r4, [pc, #128]	; (8002f34 <_malloc_r+0xb0>)
 8002eb4:	6823      	ldr	r3, [r4, #0]
 8002eb6:	b91b      	cbnz	r3, 8002ec0 <_malloc_r+0x3c>
 8002eb8:	4630      	mov	r0, r6
 8002eba:	f000 f863 	bl	8002f84 <_sbrk_r>
 8002ebe:	6020      	str	r0, [r4, #0]
 8002ec0:	4629      	mov	r1, r5
 8002ec2:	4630      	mov	r0, r6
 8002ec4:	f000 f85e 	bl	8002f84 <_sbrk_r>
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	d124      	bne.n	8002f16 <_malloc_r+0x92>
 8002ecc:	230c      	movs	r3, #12
 8002ece:	4630      	mov	r0, r6
 8002ed0:	6033      	str	r3, [r6, #0]
 8002ed2:	f000 f868 	bl	8002fa6 <__malloc_unlock>
 8002ed6:	e7e4      	b.n	8002ea2 <_malloc_r+0x1e>
 8002ed8:	680b      	ldr	r3, [r1, #0]
 8002eda:	1b5b      	subs	r3, r3, r5
 8002edc:	d418      	bmi.n	8002f10 <_malloc_r+0x8c>
 8002ede:	2b0b      	cmp	r3, #11
 8002ee0:	d90f      	bls.n	8002f02 <_malloc_r+0x7e>
 8002ee2:	600b      	str	r3, [r1, #0]
 8002ee4:	18cc      	adds	r4, r1, r3
 8002ee6:	50cd      	str	r5, [r1, r3]
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f000 f85c 	bl	8002fa6 <__malloc_unlock>
 8002eee:	f104 000b 	add.w	r0, r4, #11
 8002ef2:	1d23      	adds	r3, r4, #4
 8002ef4:	f020 0007 	bic.w	r0, r0, #7
 8002ef8:	1ac3      	subs	r3, r0, r3
 8002efa:	d0d3      	beq.n	8002ea4 <_malloc_r+0x20>
 8002efc:	425a      	negs	r2, r3
 8002efe:	50e2      	str	r2, [r4, r3]
 8002f00:	e7d0      	b.n	8002ea4 <_malloc_r+0x20>
 8002f02:	684b      	ldr	r3, [r1, #4]
 8002f04:	428c      	cmp	r4, r1
 8002f06:	bf16      	itet	ne
 8002f08:	6063      	strne	r3, [r4, #4]
 8002f0a:	6013      	streq	r3, [r2, #0]
 8002f0c:	460c      	movne	r4, r1
 8002f0e:	e7eb      	b.n	8002ee8 <_malloc_r+0x64>
 8002f10:	460c      	mov	r4, r1
 8002f12:	6849      	ldr	r1, [r1, #4]
 8002f14:	e7cc      	b.n	8002eb0 <_malloc_r+0x2c>
 8002f16:	1cc4      	adds	r4, r0, #3
 8002f18:	f024 0403 	bic.w	r4, r4, #3
 8002f1c:	42a0      	cmp	r0, r4
 8002f1e:	d005      	beq.n	8002f2c <_malloc_r+0xa8>
 8002f20:	1a21      	subs	r1, r4, r0
 8002f22:	4630      	mov	r0, r6
 8002f24:	f000 f82e 	bl	8002f84 <_sbrk_r>
 8002f28:	3001      	adds	r0, #1
 8002f2a:	d0cf      	beq.n	8002ecc <_malloc_r+0x48>
 8002f2c:	6025      	str	r5, [r4, #0]
 8002f2e:	e7db      	b.n	8002ee8 <_malloc_r+0x64>
 8002f30:	20000090 	.word	0x20000090
 8002f34:	20000094 	.word	0x20000094

08002f38 <_realloc_r>:
 8002f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f3a:	4607      	mov	r7, r0
 8002f3c:	4614      	mov	r4, r2
 8002f3e:	460e      	mov	r6, r1
 8002f40:	b921      	cbnz	r1, 8002f4c <_realloc_r+0x14>
 8002f42:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002f46:	4611      	mov	r1, r2
 8002f48:	f7ff bf9c 	b.w	8002e84 <_malloc_r>
 8002f4c:	b922      	cbnz	r2, 8002f58 <_realloc_r+0x20>
 8002f4e:	f7ff ff4d 	bl	8002dec <_free_r>
 8002f52:	4625      	mov	r5, r4
 8002f54:	4628      	mov	r0, r5
 8002f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f58:	f000 f826 	bl	8002fa8 <_malloc_usable_size_r>
 8002f5c:	42a0      	cmp	r0, r4
 8002f5e:	d20f      	bcs.n	8002f80 <_realloc_r+0x48>
 8002f60:	4621      	mov	r1, r4
 8002f62:	4638      	mov	r0, r7
 8002f64:	f7ff ff8e 	bl	8002e84 <_malloc_r>
 8002f68:	4605      	mov	r5, r0
 8002f6a:	2800      	cmp	r0, #0
 8002f6c:	d0f2      	beq.n	8002f54 <_realloc_r+0x1c>
 8002f6e:	4631      	mov	r1, r6
 8002f70:	4622      	mov	r2, r4
 8002f72:	f7ff ff17 	bl	8002da4 <memcpy>
 8002f76:	4631      	mov	r1, r6
 8002f78:	4638      	mov	r0, r7
 8002f7a:	f7ff ff37 	bl	8002dec <_free_r>
 8002f7e:	e7e9      	b.n	8002f54 <_realloc_r+0x1c>
 8002f80:	4635      	mov	r5, r6
 8002f82:	e7e7      	b.n	8002f54 <_realloc_r+0x1c>

08002f84 <_sbrk_r>:
 8002f84:	b538      	push	{r3, r4, r5, lr}
 8002f86:	2300      	movs	r3, #0
 8002f88:	4c05      	ldr	r4, [pc, #20]	; (8002fa0 <_sbrk_r+0x1c>)
 8002f8a:	4605      	mov	r5, r0
 8002f8c:	4608      	mov	r0, r1
 8002f8e:	6023      	str	r3, [r4, #0]
 8002f90:	f7fd fba6 	bl	80006e0 <_sbrk>
 8002f94:	1c43      	adds	r3, r0, #1
 8002f96:	d102      	bne.n	8002f9e <_sbrk_r+0x1a>
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	b103      	cbz	r3, 8002f9e <_sbrk_r+0x1a>
 8002f9c:	602b      	str	r3, [r5, #0]
 8002f9e:	bd38      	pop	{r3, r4, r5, pc}
 8002fa0:	2000016c 	.word	0x2000016c

08002fa4 <__malloc_lock>:
 8002fa4:	4770      	bx	lr

08002fa6 <__malloc_unlock>:
 8002fa6:	4770      	bx	lr

08002fa8 <_malloc_usable_size_r>:
 8002fa8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002fac:	1f18      	subs	r0, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	bfbc      	itt	lt
 8002fb2:	580b      	ldrlt	r3, [r1, r0]
 8002fb4:	18c0      	addlt	r0, r0, r3
 8002fb6:	4770      	bx	lr

08002fb8 <_init>:
 8002fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fba:	bf00      	nop
 8002fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fbe:	bc08      	pop	{r3}
 8002fc0:	469e      	mov	lr, r3
 8002fc2:	4770      	bx	lr

08002fc4 <_fini>:
 8002fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fc6:	bf00      	nop
 8002fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fca:	bc08      	pop	{r3}
 8002fcc:	469e      	mov	lr, r3
 8002fce:	4770      	bx	lr
